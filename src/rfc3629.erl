%%% Do not modify this file, it is automatically generated by abnfc.
%%% All changes will be lost when it is regenerated.
%%% Generated by abnfc_gen on 2018-07-11 15:39:44

-module(rfc3629).

-export(['UTF8-1'/0, 'UTF8-2'/0, 'UTF8-3'/0, 'UTF8-4'/0,
	 'UTF8-char'/0, 'UTF8-octets'/0, 'UTF8-tail'/0,
	 decode/2]).

-include("rfc3629.hrl").

decode('UTF8-octets', Str) -> ('UTF8-octets'())(Str);
decode('UTF8-char', Str) -> ('UTF8-char'())(Str);
decode('UTF8-1', Str) -> ('UTF8-1'())(Str);
decode('UTF8-2', Str) -> ('UTF8-2'())(Str);
decode('UTF8-3', Str) -> ('UTF8-3'())(Str);
decode('UTF8-4', Str) -> ('UTF8-4'())(Str);
decode('UTF8-tail', Str) -> ('UTF8-tail'())(Str).

'UTF8-octets'() ->
    '__repeat'(0, infinity, 'UTF8-char'()).

'UTF8-char'() ->
    '__alt'(['UTF8-1'(), 'UTF8-2'(), 'UTF8-3'(),
	     'UTF8-4'()]).

'UTF8-1'() ->
    fun ([C | Tl]) when (C >= 0) and (C =< 127) ->
	    {ok, C, Tl};
	(_) -> fail
    end.

'UTF8-2'() ->
    '__seq'([fun ([C | Tl])
		     when (C >= 194) and (C =< 223) ->
		     {ok, C, Tl};
		 (_) -> fail
	     end,
	     'UTF8-tail'()]).

'UTF8-3'() ->
    '__alt'(['__seq'([fun ([224 | Tl]) -> {ok, 224, Tl};
			  (_) -> fail
		      end,
		      fun ([C | Tl]) when (C >= 160) and (C =< 191) ->
			      {ok, C, Tl};
			  (_) -> fail
		      end,
		      'UTF8-tail'()]),
	     '__seq'([fun ([C | Tl])
			      when (C >= 225) and (C =< 236) ->
			      {ok, C, Tl};
			  (_) -> fail
		      end,
		      '__repeat'(2, 2, 'UTF8-tail'())]),
	     '__seq'([fun ([237 | Tl]) -> {ok, 237, Tl};
			  (_) -> fail
		      end,
		      fun ([C | Tl]) when (C >= 128) and (C =< 159) ->
			      {ok, C, Tl};
			  (_) -> fail
		      end,
		      'UTF8-tail'()]),
	     '__seq'([fun ([C | Tl])
			      when (C >= 238) and (C =< 239) ->
			      {ok, C, Tl};
			  (_) -> fail
		      end,
		      '__repeat'(2, 2, 'UTF8-tail'())])]).

'UTF8-4'() ->
    '__alt'(['__seq'([fun ([240 | Tl]) -> {ok, 240, Tl};
			  (_) -> fail
		      end,
		      fun ([C | Tl]) when (C >= 144) and (C =< 191) ->
			      {ok, C, Tl};
			  (_) -> fail
		      end,
		      '__repeat'(2, 2, 'UTF8-tail'())]),
	     '__seq'([fun ([C | Tl])
			      when (C >= 241) and (C =< 243) ->
			      {ok, C, Tl};
			  (_) -> fail
		      end,
		      '__repeat'(3, 3, 'UTF8-tail'())]),
	     '__seq'([fun ([244 | Tl]) -> {ok, 244, Tl};
			  (_) -> fail
		      end,
		      fun ([C | Tl]) when (C >= 128) and (C =< 143) ->
			      {ok, C, Tl};
			  (_) -> fail
		      end,
		      '__repeat'(2, 2, 'UTF8-tail'())])]).

'UTF8-tail'() ->
    fun ([C | Tl]) when (C >= 128) and (C =< 400) ->
	    {ok, C, Tl};
	(_) -> fail
    end.

'__alt'(Ps) -> fun (T) -> '__do_alt'(Ps, T) end.

'__do_alt'([P | Ps], T) ->
    case P(T) of
      {ok, _R, _T1} = Res -> Res;
      fail -> '__do_alt'(Ps, T)
    end;
'__do_alt'([], _) -> fail.

'__repeat'(Min, Max, P) -> '__repeat'(Min, Max, P, 0).

'__repeat'(Min, Max, P, Found) ->
    fun (T) -> '__do_repeat'(Min, Max, P, Found, T) end.

'__do_repeat'(Min, Max, P, Found, T) ->
    case P(T) of
      {ok, R1, T1} when Max == Found + 1 -> {ok, [R1], T1};
      {ok, R1, T1} ->
	  case '__do_repeat'(Min, Max, P, Found + 1, T1) of
	    {ok, R2, T2} -> {ok, [R1 | R2], T2};
	    fail when Found >= Min -> {ok, [R1], T1};
	    fail -> fail
	  end;
      fail when Found >= Min -> {ok, [], T};
      fail -> fail
    end.

'__seq'(Ps) -> fun (T) -> '__do_seq'(Ps, T) end.

'__do_seq'([P | Ps], T) ->
    case P(T) of
      {ok, R1, T1} ->
	  case '__do_seq'(Ps, T1) of
	    {ok, R2, T2} -> {ok, [R1 | R2], T2};
	    fail -> fail
	  end;
      fail -> fail
    end;
'__do_seq'([], T) -> {ok, [], T}.
