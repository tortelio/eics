%%% Do not modify this file, it is automatically generated by abnfc.
%%% All changes will be lost when it is regenerated.
%%% Generated by abnfc_gen on 2018-07-24 14:48:54

-module(rfc3986).

-export(['IP-literal'/0, 'IPv4address'/0,
	 'IPv6address'/0, 'IPvFuture'/0, 'absolute-uri'/0,
	 authority/0, 'dec-octet'/0, decode/2, fragment/0,
	 'gen-delims'/0, h16/0, 'hier-part'/0, host/0, ls32/0,
	 path/0, 'path-abempty'/0, 'path-absolute'/0,
	 'path-empty'/0, 'path-noscheme'/0, 'path-rootless'/0,
	 pchar/0, 'pct-encoded'/0, port/0, query/0, 'reg-name'/0,
	 'relative-part'/0, 'relative-ref'/0, reserved/0,
	 scheme/0, segment/0, 'segment-nz'/0, 'segment-nz-nc'/0,
	 'sub-delims'/0, unreserved/0, uri/0, 'uri-reference'/0,
	 userinfo/0]).

-include("rfc3986.hrl").

decode(uri, Str) -> (uri())(Str);
decode('hier-part', Str) -> ('hier-part'())(Str);
decode('uri-reference', Str) ->
    ('uri-reference'())(Str);
decode('absolute-uri', Str) -> ('absolute-uri'())(Str);
decode('relative-ref', Str) -> ('relative-ref'())(Str);
decode('relative-part', Str) ->
    ('relative-part'())(Str);
decode(scheme, Str) -> (scheme())(Str);
decode(authority, Str) -> (authority())(Str);
decode(userinfo, Str) -> (userinfo())(Str);
decode(host, Str) -> (host())(Str);
decode(port, Str) -> (port())(Str);
decode('IP-literal', Str) -> ('IP-literal'())(Str);
decode('IPvFuture', Str) -> ('IPvFuture'())(Str);
decode('IPv6address', Str) -> ('IPv6address'())(Str);
decode(h16, Str) -> (h16())(Str);
decode(ls32, Str) -> (ls32())(Str);
decode('IPv4address', Str) -> ('IPv4address'())(Str);
decode('dec-octet', Str) -> ('dec-octet'())(Str);
decode('reg-name', Str) -> ('reg-name'())(Str);
decode(path, Str) -> (path())(Str);
decode('path-abempty', Str) -> ('path-abempty'())(Str);
decode('path-absolute', Str) ->
    ('path-absolute'())(Str);
decode('path-noscheme', Str) ->
    ('path-noscheme'())(Str);
decode('path-rootless', Str) ->
    ('path-rootless'())(Str);
decode('path-empty', Str) -> ('path-empty'())(Str);
decode(segment, Str) -> (segment())(Str);
decode('segment-nz', Str) -> ('segment-nz'())(Str);
decode('segment-nz-nc', Str) ->
    ('segment-nz-nc'())(Str);
decode(pchar, Str) -> (pchar())(Str);
decode(query, Str) -> (query())(Str);
decode(fragment, Str) -> (fragment())(Str);
decode('pct-encoded', Str) -> ('pct-encoded'())(Str);
decode(unreserved, Str) -> (unreserved())(Str);
decode(reserved, Str) -> (reserved())(Str);
decode('gen-delims', Str) -> ('gen-delims'())(Str);
decode('sub-delims', Str) -> ('sub-delims'())(Str).

uri() ->
    '__seq'([scheme(),
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     'hier-part'(),
	     '__repeat'(0, 1,
			'__seq'([fun ([63 | Tl]) -> {ok, 63, Tl};
				     (_) -> fail
				 end,
				 query()])),
	     '__repeat'(0, 1,
			'__seq'([fun ([35 | Tl]) -> {ok, 35, Tl};
				     (_) -> fail
				 end,
				 fragment()]))]).

'hier-part'() ->
    '__alt'(['__seq'([fun ([C1, C2 | Tl])
			      when C1 == 47, C2 == 47 ->
			      {ok, [C1, C2], Tl};
			  (_) -> fail
		      end,
		      authority(), 'path-abempty'()]),
	     'path-absolute'(), 'path-rootless'(), 'path-empty'()]).

'uri-reference'() -> '__alt'([uri(), 'relative-ref'()]).

'absolute-uri'() ->
    '__seq'([scheme(),
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     'hier-part'(),
	     '__repeat'(0, 1,
			'__seq'([fun ([63 | Tl]) -> {ok, 63, Tl};
				     (_) -> fail
				 end,
				 query()]))]).

'relative-ref'() ->
    '__seq'(['relative-part'(),
	     '__repeat'(0, 1,
			'__seq'([fun ([63 | Tl]) -> {ok, 63, Tl};
				     (_) -> fail
				 end,
				 query()])),
	     '__repeat'(0, 1,
			'__seq'([fun ([35 | Tl]) -> {ok, 35, Tl};
				     (_) -> fail
				 end,
				 fragment()]))]).

'relative-part'() ->
    '__alt'(['__seq'([fun ([C1, C2 | Tl])
			      when C1 == 47, C2 == 47 ->
			      {ok, [C1, C2], Tl};
			  (_) -> fail
		      end,
		      authority(), 'path-abempty'()]),
	     'path-absolute'(), 'path-noscheme'(), 'path-empty'()]).

scheme() ->
    '__seq'(['ALPHA'(),
	     '__repeat'(0, infinity,
			'__alt'([fun ([C | Tl]) when (C >= 45) and (C =< 46) ->
					 {ok, C, Tl};
				     ([C | Tl]) when C == 43 -> {ok, C, Tl};
				     (_) -> fail
				 end,
				 'ALPHA'(), 'DIGIT'()]))]).

authority() ->
    '__seq'(['__repeat'(0, 1,
			'__seq'([userinfo(),
				 fun ([64 | Tl]) -> {ok, 64, Tl};
				     (_) -> fail
				 end])),
	     host(),
	     '__repeat'(0, 1,
			'__seq'([fun ([58 | Tl]) -> {ok, 58, Tl};
				     (_) -> fail
				 end,
				 port()]))]).

userinfo() ->
    '__repeat'(0, infinity,
	       '__alt'([fun ([C | Tl]) when C == 58 -> {ok, C, Tl};
			    (_) -> fail
			end,
			unreserved(), 'pct-encoded'(), 'sub-delims'()])).

host() ->
    '__alt'(['IP-literal'(), 'IPv4address'(),
	     'reg-name'()]).

port() -> '__repeat'(0, infinity, 'DIGIT'()).

'IP-literal'() ->
    '__seq'([fun ([91 | Tl]) -> {ok, 91, Tl};
		 (_) -> fail
	     end,
	     '__alt'(['IPv6address'(), 'IPvFuture'()]),
	     fun ([93 | Tl]) -> {ok, 93, Tl};
		 (_) -> fail
	     end]).

'IPvFuture'() ->
    '__seq'([fun ([C | Tl]) when C == 118 -> {ok, C, Tl};
		 ([C | Tl]) when C == 86 -> {ok, C, Tl};
		 (_) -> fail
	     end,
	     '__repeat'(1, infinity, 'HEXDIG'()),
	     fun ([46 | Tl]) -> {ok, 46, Tl};
		 (_) -> fail
	     end,
	     '__repeat'(1, infinity,
			'__alt'([fun ([C | Tl]) when C == 58 -> {ok, C, Tl};
				     (_) -> fail
				 end,
				 unreserved(), 'sub-delims'()]))]).

'IPv6address'() ->
    '__alt'(['__seq'(['__repeat'(6, 6,
				 '__seq'([h16(),
					  fun ([58 | Tl]) -> {ok, 58, Tl};
					      (_) -> fail
					  end])),
		      ls32()]),
	     '__seq'([fun ([C1, C2 | Tl]) when C1 == 58, C2 == 58 ->
			      {ok, [C1, C2], Tl};
			  (_) -> fail
		      end,
		      '__repeat'(5, 5,
				 '__seq'([h16(),
					  fun ([58 | Tl]) -> {ok, 58, Tl};
					      (_) -> fail
					  end])),
		      ls32()]),
	     '__seq'(['__repeat'(0, 1, h16()),
		      fun ([C1, C2 | Tl]) when C1 == 58, C2 == 58 ->
			      {ok, [C1, C2], Tl};
			  (_) -> fail
		      end,
		      '__repeat'(4, 4,
				 '__seq'([h16(),
					  fun ([58 | Tl]) -> {ok, 58, Tl};
					      (_) -> fail
					  end])),
		      ls32()]),
	     '__seq'(['__repeat'(0, 1,
				 '__seq'(['__repeat'(0, 1,
						     '__seq'([h16(),
							      fun ([58 | Tl]) -> {ok, 58, Tl};
								  (_) -> fail
							      end])),
					  h16()])),
		      fun ([C1, C2 | Tl]) when C1 == 58, C2 == 58 ->
			      {ok, [C1, C2], Tl};
			  (_) -> fail
		      end,
		      '__repeat'(3, 3,
				 '__seq'([h16(),
					  fun ([58 | Tl]) -> {ok, 58, Tl};
					      (_) -> fail
					  end])),
		      ls32()]),
	     '__seq'(['__repeat'(0, 1,
				 '__seq'(['__repeat'(0, 2,
						     '__seq'([h16(),
							      fun ([58 | Tl]) -> {ok, 58, Tl};
								  (_) -> fail
							      end])),
					  h16()])),
		      fun ([C1, C2 | Tl]) when C1 == 58, C2 == 58 ->
			      {ok, [C1, C2], Tl};
			  (_) -> fail
		      end,
		      '__repeat'(2, 2,
				 '__seq'([h16(),
					  fun ([58 | Tl]) -> {ok, 58, Tl};
					      (_) -> fail
					  end])),
		      ls32()]),
	     '__seq'(['__repeat'(0, 1,
				 '__seq'(['__repeat'(0, 3,
						     '__seq'([h16(),
							      fun ([58 | Tl]) -> {ok, 58, Tl};
								  (_) -> fail
							      end])),
					  h16()])),
		      fun ([C1, C2 | Tl]) when C1 == 58, C2 == 58 ->
			      {ok, [C1, C2], Tl};
			  (_) -> fail
		      end,
		      h16(),
		      fun ([58 | Tl]) -> {ok, 58, Tl};
			  (_) -> fail
		      end,
		      ls32()]),
	     '__seq'(['__repeat'(0, 1,
				 '__seq'(['__repeat'(0, 4,
						     '__seq'([h16(),
							      fun ([58 | Tl]) -> {ok, 58, Tl};
								  (_) -> fail
							      end])),
					  h16()])),
		      fun ([C1, C2 | Tl]) when C1 == 58, C2 == 58 ->
			      {ok, [C1, C2], Tl};
			  (_) -> fail
		      end,
		      ls32()]),
	     '__seq'(['__repeat'(0, 1,
				 '__seq'(['__repeat'(0, 5,
						     '__seq'([h16(),
							      fun ([58 | Tl]) -> {ok, 58, Tl};
								  (_) -> fail
							      end])),
					  h16()])),
		      fun ([C1, C2 | Tl]) when C1 == 58, C2 == 58 ->
			      {ok, [C1, C2], Tl};
			  (_) -> fail
		      end,
		      h16()]),
	     '__seq'(['__repeat'(0, 1,
				 '__seq'(['__repeat'(0, 6,
						     '__seq'([h16(),
							      fun ([58 | Tl]) -> {ok, 58, Tl};
								  (_) -> fail
							      end])),
					  h16()])),
		      fun ([C1, C2 | Tl]) when C1 == 58, C2 == 58 ->
			      {ok, [C1, C2], Tl};
			  (_) -> fail
		      end])]).

h16() -> '__repeat'(1, 4, 'HEXDIG'()).

ls32() ->
    '__alt'(['__seq'([h16(),
		      fun ([58 | Tl]) -> {ok, 58, Tl};
			  (_) -> fail
		      end,
		      h16()]),
	     'IPv4address'()]).

'IPv4address'() ->
    '__seq'(['dec-octet'(),
	     fun ([46 | Tl]) -> {ok, 46, Tl};
		 (_) -> fail
	     end,
	     'dec-octet'(),
	     fun ([46 | Tl]) -> {ok, 46, Tl};
		 (_) -> fail
	     end,
	     'dec-octet'(),
	     fun ([46 | Tl]) -> {ok, 46, Tl};
		 (_) -> fail
	     end,
	     'dec-octet'()]).

'dec-octet'() ->
    '__alt'(['DIGIT'(),
	     '__seq'([fun ([C | Tl]) when (C >= 49) and (C =< 57) ->
			      {ok, C, Tl};
			  (_) -> fail
		      end,
		      'DIGIT'()]),
	     '__seq'([fun ([49 | Tl]) -> {ok, 49, Tl};
			  (_) -> fail
		      end,
		      '__repeat'(2, 2, 'DIGIT'())]),
	     '__seq'([fun ([50 | Tl]) -> {ok, 50, Tl};
			  (_) -> fail
		      end,
		      fun ([C | Tl]) when (C >= 48) and (C =< 52) ->
			      {ok, C, Tl};
			  (_) -> fail
		      end,
		      'DIGIT'()]),
	     '__seq'([fun ([C1, C2 | Tl]) when C1 == 50, C2 == 53 ->
			      {ok, [C1, C2], Tl};
			  (_) -> fail
		      end,
		      fun ([C | Tl]) when (C >= 48) and (C =< 53) ->
			      {ok, C, Tl};
			  (_) -> fail
		      end])]).

'reg-name'() ->
    '__repeat'(0, infinity,
	       '__alt'([unreserved(), 'pct-encoded'(),
			'sub-delims'()])).

path() ->
    '__alt'(['path-abempty'(), 'path-absolute'(),
	     'path-noscheme'(), 'path-rootless'(), 'path-empty'()]).

'path-abempty'() ->
    '__repeat'(0, infinity,
	       '__seq'([fun ([47 | Tl]) -> {ok, 47, Tl};
			    (_) -> fail
			end,
			segment()])).

'path-absolute'() ->
    '__seq'([fun ([47 | Tl]) -> {ok, 47, Tl};
		 (_) -> fail
	     end,
	     '__repeat'(0, 1,
			'__seq'(['segment-nz'(),
				 '__repeat'(0, infinity,
					    '__seq'([fun ([47 | Tl]) -> {ok, 47, Tl};
							 (_) -> fail
						     end,
						     segment()]))]))]).

'path-noscheme'() ->
    '__seq'(['segment-nz-nc'(),
	     '__repeat'(0, infinity,
			'__seq'([fun ([47 | Tl]) -> {ok, 47, Tl};
				     (_) -> fail
				 end,
				 segment()]))]).

'path-rootless'() ->
    '__seq'(['segment-nz'(),
	     '__repeat'(0, infinity,
			'__seq'([fun ([47 | Tl]) -> {ok, 47, Tl};
				     (_) -> fail
				 end,
				 segment()]))]).

'path-empty'() -> '__repeat'(0, 0, pchar()).

segment() -> '__repeat'(0, infinity, pchar()).

'segment-nz'() -> '__repeat'(1, infinity, pchar()).

'segment-nz-nc'() ->
    '__repeat'(1, infinity,
	       '__alt'([fun ([C | Tl]) when C == 64 -> {ok, C, Tl};
			    (_) -> fail
			end,
			unreserved(), 'pct-encoded'(), 'sub-delims'()])).

pchar() ->
    '__alt'([fun ([C | Tl]) when C == 58 -> {ok, C, Tl};
		 ([C | Tl]) when C == 64 -> {ok, C, Tl};
		 (_) -> fail
	     end,
	     unreserved(), 'pct-encoded'(), 'sub-delims'()]).

query() ->
    '__repeat'(0, infinity,
	       '__alt'([fun ([C | Tl]) when C == 47 -> {ok, C, Tl};
			    ([C | Tl]) when C == 63 -> {ok, C, Tl};
			    (_) -> fail
			end,
			pchar()])).

fragment() ->
    '__repeat'(0, infinity,
	       '__alt'([fun ([C | Tl]) when C == 47 -> {ok, C, Tl};
			    ([C | Tl]) when C == 63 -> {ok, C, Tl};
			    (_) -> fail
			end,
			pchar()])).

'pct-encoded'() ->
    '__seq'([fun ([37 | Tl]) -> {ok, 37, Tl};
		 (_) -> fail
	     end,
	     'HEXDIG'(), 'HEXDIG'()]).

unreserved() ->
    '__alt'([fun ([C | Tl]) when (C >= 45) and (C =< 46) ->
		     {ok, C, Tl};
		 ([C | Tl]) when C == 95 -> {ok, C, Tl};
		 ([C | Tl]) when C == 126 -> {ok, C, Tl};
		 (_) -> fail
	     end,
	     'ALPHA'(), 'DIGIT'()]).

reserved() -> '__alt'(['gen-delims'(), 'sub-delims'()]).

'gen-delims'() ->
    fun ([C | Tl]) when (C >= 63) and (C =< 64) ->
	    {ok, C, Tl};
	([C | Tl]) when C == 35 -> {ok, C, Tl};
	([C | Tl]) when C == 47 -> {ok, C, Tl};
	([C | Tl]) when C == 58 -> {ok, C, Tl};
	([C | Tl]) when C == 91 -> {ok, C, Tl};
	([C | Tl]) when C == 93 -> {ok, C, Tl};
	(_) -> fail
    end.

'sub-delims'() ->
    fun ([C | Tl]) when (C >= 38) and (C =< 44) ->
	    {ok, C, Tl};
	([C | Tl]) when C == 33 -> {ok, C, Tl};
	([C | Tl]) when C == 36 -> {ok, C, Tl};
	([C | Tl]) when C == 59 -> {ok, C, Tl};
	([C | Tl]) when C == 61 -> {ok, C, Tl};
	(_) -> fail
    end.

'__alt'(Ps) -> fun (T) -> '__do_alt'(Ps, T) end.

'__do_alt'([P | Ps], T) ->
    case P(T) of
      {ok, _R, _T1} = Res -> Res;
      fail -> '__do_alt'(Ps, T)
    end;
'__do_alt'([], _) -> fail.

'__repeat'(Min, Max, P) -> '__repeat'(Min, Max, P, 0).

'__repeat'(Min, Max, P, Found) ->
    fun (T) -> '__do_repeat'(Min, Max, P, Found, T) end.

'__do_repeat'(Min, Max, P, Found, T) ->
    case P(T) of
      {ok, R1, T1} when Max == Found + 1 -> {ok, [R1], T1};
      {ok, R1, T1} ->
	  case '__do_repeat'(Min, Max, P, Found + 1, T1) of
	    {ok, R2, T2} -> {ok, [R1 | R2], T2};
	    fail when Found >= Min -> {ok, [R1], T1};
	    fail -> fail
	  end;
      fail when Found >= Min -> {ok, [], T};
      fail -> fail
    end.

'__seq'(Ps) -> fun (T) -> '__do_seq'(Ps, T) end.

'__do_seq'([P | Ps], T) ->
    case P(T) of
      {ok, R1, T1} ->
	  case '__do_seq'(Ps, T1) of
	    {ok, R2, T2} -> {ok, [R1 | R2], T2};
	    fail -> fail
	  end;
      fail -> fail
    end;
'__do_seq'([], T) -> {ok, [], T}.
