%%% Do not modify this file, it is automatically generated by abnfc.
%%% All changes will be lost when it is regenerated.
%%% Generated by abnfc_gen on 2018-07-11 15:39:45

-module(rfc5234).

-export(['ALPHA'/0, 'BIT'/0, 'CHAR'/0, 'CR'/0, 'CRLF'/0,
	 'CTL'/0, 'DIGIT'/0, 'DQUOTE'/0, 'HEXDIG'/0, 'HTAB'/0,
	 'LF'/0, 'LWSP'/0, 'OCTET'/0, 'SP'/0, 'VCHAR'/0, 'WSP'/0,
	 alternation/0, 'bin-val'/0, 'c-nl'/0, 'c-wsp'/0,
	 'char-line'/0, 'char-val'/0, comment/0, concatenation/0,
	 'dec-val'/0, decode/2, 'defined-as'/0, element/0,
	 elements/0, group/0, 'hex-val'/0, 'num-val'/0, option/0,
	 'prose-val'/0, repeat/0, repetition/0, rulename/0]).

-include("rfc5234.hrl").

decode('char-line', Str) -> ('char-line'())(Str);
decode(rulename, Str) -> (rulename())(Str);
decode('defined-as', Str) -> ('defined-as'())(Str);
decode(elements, Str) -> (elements())(Str);
decode('c-wsp', Str) -> ('c-wsp'())(Str);
decode('c-nl', Str) -> ('c-nl'())(Str);
decode(comment, Str) -> (comment())(Str);
decode(alternation, Str) -> (alternation())(Str);
decode(concatenation, Str) -> (concatenation())(Str);
decode(repetition, Str) -> (repetition())(Str);
decode(repeat, Str) -> (repeat())(Str);
decode(element, Str) -> (element())(Str);
decode(group, Str) -> (group())(Str);
decode(option, Str) -> (option())(Str);
decode('char-val', Str) -> ('char-val'())(Str);
decode('num-val', Str) -> ('num-val'())(Str);
decode('bin-val', Str) -> ('bin-val'())(Str);
decode('dec-val', Str) -> ('dec-val'())(Str);
decode('hex-val', Str) -> ('hex-val'())(Str);
decode('prose-val', Str) -> ('prose-val'())(Str);
decode('ALPHA', Str) -> ('ALPHA'())(Str);
decode('BIT', Str) -> ('BIT'())(Str);
decode('CHAR', Str) -> ('CHAR'())(Str);
decode('CR', Str) -> ('CR'())(Str);
decode('CRLF', Str) -> ('CRLF'())(Str);
decode('CTL', Str) -> ('CTL'())(Str);
decode('DIGIT', Str) -> ('DIGIT'())(Str);
decode('DQUOTE', Str) -> ('DQUOTE'())(Str);
decode('HEXDIG', Str) -> ('HEXDIG'())(Str);
decode('HTAB', Str) -> ('HTAB'())(Str);
decode('LF', Str) -> ('LF'())(Str);
decode('LWSP', Str) -> ('LWSP'())(Str);
decode('OCTET', Str) -> ('OCTET'())(Str);
decode('SP', Str) -> ('SP'())(Str);
decode('VCHAR', Str) -> ('VCHAR'())(Str);
decode('WSP', Str) -> ('WSP'())(Str).

'char-line'() ->
    '__seq'([fun ([C1, C2 | Tl]) when C1 == 13, C2 == 10 ->
		     {ok, [C1, C2], Tl};
		 (_) -> fail
	     end,
	     fun ([C | Tl]) when (C >= 32) and (C =< 126) ->
		     {ok, C, Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2 | Tl]) when C1 == 13, C2 == 10 ->
		     {ok, [C1, C2], Tl};
		 (_) -> fail
	     end]).

rulename() ->
    '__seq'(['ALPHA'(),
	     '__repeat'(0, infinity,
			'__alt'([fun ([C | Tl]) when C == 45 -> {ok, C, Tl};
				     (_) -> fail
				 end,
				 'ALPHA'(), 'DIGIT'()]))]).

'defined-as'() ->
    '__seq'(['__repeat'(0, infinity, 'c-wsp'()),
	     '__alt'([fun ([C | Tl]) when C == 61 -> {ok, C, Tl};
			  (_) -> fail
		      end,
		      fun ([C1, C2 | Tl]) when C1 == 61, C2 == 47 ->
			      {ok, [C1, C2], Tl};
			  (_) -> fail
		      end]),
	     '__repeat'(0, infinity, 'c-wsp'())]).

elements() ->
    '__seq'([alternation(),
	     '__repeat'(0, infinity, 'c-wsp'())]).

'c-wsp'() ->
    '__alt'(['WSP'(), '__seq'(['c-nl'(), 'WSP'()])]).

'c-nl'() -> '__alt'([comment(), 'CRLF'()]).

comment() ->
    '__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
		 (_) -> fail
	     end,
	     '__repeat'(0, infinity, '__alt'(['WSP'(), 'VCHAR'()])),
	     'CRLF'()]).

alternation() ->
    '__seq'([concatenation(),
	     '__repeat'(0, infinity,
			'__seq'(['__repeat'(0, infinity, 'c-wsp'()),
				 fun ([47 | Tl]) -> {ok, 47, Tl};
				     (_) -> fail
				 end,
				 '__repeat'(0, infinity, 'c-wsp'()),
				 concatenation()]))]).

concatenation() ->
    '__seq'([repetition(),
	     '__repeat'(0, infinity,
			'__seq'(['__repeat'(1, infinity, 'c-wsp'()),
				 repetition()]))]).

repetition() ->
    '__seq'(['__repeat'(0, 1, repeat()), element()]).

repeat() ->
    '__alt'(['__repeat'(1, infinity, 'DIGIT'()),
	     '__seq'(['__repeat'(0, infinity, 'DIGIT'()),
		      fun ([42 | Tl]) -> {ok, 42, Tl};
			  (_) -> fail
		      end,
		      '__repeat'(0, infinity, 'DIGIT'())])]).

element() ->
    '__alt'([rulename(), group(), option(), 'char-val'(),
	     'num-val'(), 'prose-val'()]).

group() ->
    '__seq'([fun ([40 | Tl]) -> {ok, 40, Tl};
		 (_) -> fail
	     end,
	     '__repeat'(0, infinity, 'c-wsp'()), alternation(),
	     '__repeat'(0, infinity, 'c-wsp'()),
	     fun ([41 | Tl]) -> {ok, 41, Tl};
		 (_) -> fail
	     end]).

option() ->
    '__seq'([fun ([91 | Tl]) -> {ok, 91, Tl};
		 (_) -> fail
	     end,
	     '__repeat'(0, infinity, 'c-wsp'()), alternation(),
	     '__repeat'(0, infinity, 'c-wsp'()),
	     fun ([93 | Tl]) -> {ok, 93, Tl};
		 (_) -> fail
	     end]).

'char-val'() ->
    '__seq'(['DQUOTE'(),
	     '__repeat'(0, infinity,
			fun ([C | Tl]) when (C >= 35) and (C =< 126) ->
				{ok, C, Tl};
			    ([C | Tl]) when (C >= 32) and (C =< 33) -> {ok, C, Tl};
			    (_) -> fail
			end),
	     'DQUOTE'()]).

'num-val'() ->
    '__seq'([fun ([37 | Tl]) -> {ok, 37, Tl};
		 (_) -> fail
	     end,
	     '__alt'(['bin-val'(), 'dec-val'(), 'hex-val'()])]).

'bin-val'() ->
    '__seq'([fun ([C | Tl]) when C == 98 -> {ok, C, Tl};
		 ([C | Tl]) when C == 66 -> {ok, C, Tl};
		 (_) -> fail
	     end,
	     '__repeat'(1, infinity, 'BIT'()),
	     '__repeat'(0, 1,
			'__alt'(['__repeat'(1, infinity,
					    '__seq'([fun ([46 | Tl]) -> {ok, 46, Tl};
							 (_) -> fail
						     end,
						     '__repeat'(1, infinity, 'BIT'())])),
				 '__seq'([fun ([45 | Tl]) -> {ok, 45, Tl};
					      (_) -> fail
					  end,
					  '__repeat'(1, infinity, 'BIT'())])]))]).

'dec-val'() ->
    '__seq'([fun ([C | Tl]) when C == 100 -> {ok, C, Tl};
		 ([C | Tl]) when C == 68 -> {ok, C, Tl};
		 (_) -> fail
	     end,
	     '__repeat'(1, infinity, 'DIGIT'()),
	     '__repeat'(0, 1,
			'__alt'(['__repeat'(1, infinity,
					    '__seq'([fun ([46 | Tl]) -> {ok, 46, Tl};
							 (_) -> fail
						     end,
						     '__repeat'(1, infinity, 'DIGIT'())])),
				 '__seq'([fun ([45 | Tl]) -> {ok, 45, Tl};
					      (_) -> fail
					  end,
					  '__repeat'(1, infinity, 'DIGIT'())])]))]).

'hex-val'() ->
    '__seq'([fun ([C | Tl]) when C == 120 -> {ok, C, Tl};
		 ([C | Tl]) when C == 88 -> {ok, C, Tl};
		 (_) -> fail
	     end,
	     '__repeat'(1, infinity, 'HEXDIG'()),
	     '__repeat'(0, 1,
			'__alt'(['__repeat'(1, infinity,
					    '__seq'([fun ([46 | Tl]) -> {ok, 46, Tl};
							 (_) -> fail
						     end,
						     '__repeat'(1, infinity, 'HEXDIG'())])),
				 '__seq'([fun ([45 | Tl]) -> {ok, 45, Tl};
					      (_) -> fail
					  end,
					  '__repeat'(1, infinity, 'HEXDIG'())])]))]).

'prose-val'() ->
    '__seq'([fun ([60 | Tl]) -> {ok, 60, Tl};
		 (_) -> fail
	     end,
	     '__repeat'(0, infinity,
			fun ([C | Tl]) when (C >= 63) and (C =< 126) ->
				{ok, C, Tl};
			    ([C | Tl]) when (C >= 32) and (C =< 61) -> {ok, C, Tl};
			    (_) -> fail
			end),
	     fun ([62 | Tl]) -> {ok, 62, Tl};
		 (_) -> fail
	     end]).

'ALPHA'() ->
    fun ([C | Tl]) when (C >= 65) and (C =< 90) ->
	    {ok, C, Tl};
	([C | Tl]) when (C >= 97) and (C =< 122) -> {ok, C, Tl};
	(_) -> fail
    end.

'BIT'() ->
    fun ([C | Tl]) when (C >= 48) and (C =< 49) ->
	    {ok, C, Tl};
	(_) -> fail
    end.

'CHAR'() ->
    fun ([C | Tl]) when (C >= 1) and (C =< 127) ->
	    {ok, C, Tl};
	(_) -> fail
    end.

'CR'() ->
    fun ([13 | Tl]) -> {ok, 13, Tl};
	(_) -> fail
    end.

'CRLF'() -> '__seq'(['CR'(), 'LF'()]).

'CTL'() ->
    fun ([C | Tl]) when (C >= 0) and (C =< 31) ->
	    {ok, C, Tl};
	([C | Tl]) when C == 127 -> {ok, C, Tl};
	(_) -> fail
    end.

'DIGIT'() ->
    fun ([C | Tl]) when (C >= 48) and (C =< 57) ->
	    {ok, C, Tl};
	(_) -> fail
    end.

'DQUOTE'() ->
    fun ([34 | Tl]) -> {ok, 34, Tl};
	(_) -> fail
    end.

'HEXDIG'() ->
    '__alt'(['DIGIT'(),
	     fun ([C | Tl]) when C == 97 -> {ok, C, Tl};
		 ([C | Tl]) when C == 65 -> {ok, C, Tl};
		 (_) -> fail
	     end,
	     fun ([C | Tl]) when C == 98 -> {ok, C, Tl};
		 ([C | Tl]) when C == 66 -> {ok, C, Tl};
		 (_) -> fail
	     end,
	     fun ([C | Tl]) when C == 99 -> {ok, C, Tl};
		 ([C | Tl]) when C == 67 -> {ok, C, Tl};
		 (_) -> fail
	     end,
	     fun ([C | Tl]) when C == 100 -> {ok, C, Tl};
		 ([C | Tl]) when C == 68 -> {ok, C, Tl};
		 (_) -> fail
	     end,
	     fun ([C | Tl]) when C == 101 -> {ok, C, Tl};
		 ([C | Tl]) when C == 69 -> {ok, C, Tl};
		 (_) -> fail
	     end,
	     fun ([C | Tl]) when C == 102 -> {ok, C, Tl};
		 ([C | Tl]) when C == 70 -> {ok, C, Tl};
		 (_) -> fail
	     end]).

'HTAB'() ->
    fun ([9 | Tl]) -> {ok, 9, Tl};
	(_) -> fail
    end.

'LF'() ->
    fun ([10 | Tl]) -> {ok, 10, Tl};
	(_) -> fail
    end.

'LWSP'() ->
    '__repeat'(0, infinity,
	       '__alt'(['WSP'(), '__seq'(['CRLF'(), 'WSP'()])])).

'OCTET'() ->
    fun ([C | Tl]) when (C >= 0) and (C =< 255) ->
	    {ok, C, Tl};
	(_) -> fail
    end.

'SP'() ->
    fun ([32 | Tl]) -> {ok, 32, Tl};
	(_) -> fail
    end.

'VCHAR'() ->
    fun ([C | Tl]) when (C >= 33) and (C =< 126) ->
	    {ok, C, Tl};
	(_) -> fail
    end.

'WSP'() -> '__alt'(['SP'(), 'HTAB'()]).

'__alt'(Ps) -> fun (T) -> '__do_alt'(Ps, T) end.

'__do_alt'([P | Ps], T) ->
    case P(T) of
      {ok, _R, _T1} = Res -> Res;
      fail -> '__do_alt'(Ps, T)
    end;
'__do_alt'([], _) -> fail.

'__repeat'(Min, Max, P) -> '__repeat'(Min, Max, P, 0).

'__repeat'(Min, Max, P, Found) ->
    fun (T) -> '__do_repeat'(Min, Max, P, Found, T) end.

'__do_repeat'(Min, Max, P, Found, T) ->
    case P(T) of
      {ok, R1, T1} when Max == Found + 1 -> {ok, [R1], T1};
      {ok, R1, T1} ->
	  case '__do_repeat'(Min, Max, P, Found + 1, T1) of
	    {ok, R2, T2} -> {ok, [R1 | R2], T2};
	    fail when Found >= Min -> {ok, [R1], T1};
	    fail -> fail
	  end;
      fail when Found >= Min -> {ok, [], T};
      fail -> fail
    end.

'__seq'(Ps) -> fun (T) -> '__do_seq'(Ps, T) end.

'__do_seq'([P | Ps], T) ->
    case P(T) of
      {ok, R1, T1} ->
	  case '__do_seq'(Ps, T1) of
	    {ok, R2, T2} -> {ok, [R1 | R2], T2};
	    fail -> fail
	  end;
      fail -> fail
    end;
'__do_seq'([], T) -> {ok, [], T}.
