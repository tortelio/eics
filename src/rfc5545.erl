%%% Do not modify this file, it is automatically generated by abnfc.
%%% All changes will be lost when it is regenerated.
%%% Generated by abnfc_gen on 2018-07-11 15:39:45

-module(rfc5545).

-export(['CONTROL'/0, 'ESCAPED-CHAR'/0,
	 'NON-US-ASCII'/0, 'QSAFE-CHAR'/0, 'SAFE-CHAR'/0,
	 'TSAFE-CHAR'/0, 'VALUE-CHAR'/0, action/0, actionparam/0,
	 actionvalue/0, alarmc/0, altrepparam/0, attach/0,
	 attachparam/0, attendee/0, attparam/0, audioprop/0,
	 'b-char'/0, 'b-end'/0, binary/0, boolean/0, byhrlist/0,
	 byminlist/0, bymodaylist/0, bymolist/0, byseclist/0,
	 bysplist/0, bywdaylist/0, bywknolist/0, byyrdaylist/0,
	 'cal-address'/0, calparam/0, calprops/0, calscale/0,
	 calvalue/0, categories/0, catparam/0, class/0,
	 classparam/0, classvalue/0, cnparam/0, comment/0,
	 commparam/0, completed/0, component/0, compparam/0,
	 contact/0, contentline/0, contparam/0, creaparam/0,
	 created/0, cutypeparam/0, date/0, 'date-fullyear'/0,
	 'date-mday'/0, 'date-month'/0, 'date-time'/0,
	 'date-value'/0, daylightc/0, decode/2, delfromparam/0,
	 deltoparam/0, descparam/0, description/0, dirparam/0,
	 dispprop/0, dtend/0, dtendparam/0, dtendval/0,
	 dtstamp/0, dtstart/0, dtstparam/0, dtstval/0, due/0,
	 dueparam/0, dueval/0, 'dur-date'/0, 'dur-day'/0,
	 'dur-hour'/0, 'dur-minute'/0, 'dur-second'/0,
	 'dur-time'/0, 'dur-value'/0, 'dur-week'/0, duration/0,
	 durparam/0, emailprop/0, encodingparam/0, enddate/0,
	 eventc/0, eventprop/0, exdate/0, exdtparam/0, exdtval/0,
	 extdata/0, fbparam/0, fbprop/0, fbtypeparam/0,
	 fbvalue/0, float/0, fmttypeparam/0, freebusy/0,
	 freebusyc/0, freq/0, frmparam/0, geo/0, geoparam/0,
	 geovalue/0, hour/0, 'iana-comp'/0, 'iana-param'/0,
	 'iana-prop'/0, 'iana-token'/0, icalbody/0, icalobject/0,
	 icalparameter/0, icalstream/0, infovalue/0, integer/0,
	 journalc/0, jourprop/0, language/0, languageparam/0,
	 'last-mod'/0, location/0, locparam/0, lstparam/0,
	 maxver/0, memberparam/0, method/0, metparam/0,
	 metvalue/0, minus/0, minutes/0, minver/0, monthdaynum/0,
	 monthnum/0, name/0, optinfo/0, ordmoday/0, ordwk/0,
	 ordyrday/0, organizer/0, orgparam/0, 'other-param'/0,
	 param/0, 'param-name'/0, 'param-value'/0, paramtext/0,
	 'partstat-event'/0, 'partstat-jour'/0,
	 'partstat-todo'/0, partstatparam/0, pctparam/0,
	 percent/0, period/0, 'period-explicit'/0,
	 'period-start'/0, pidparam/0, pidvalue/0, plus/0,
	 prioparam/0, priority/0, priovalue/0, prodid/0,
	 qinfovalue/0, 'quoted-string'/0, rangeparam/0, rdate/0,
	 rdtparam/0, rdtval/0, recur/0, 'recur-rule-part'/0,
	 recurid/0, related/0, relparam/0, reltypeparam/0,
	 repeat/0, repparam/0, resources/0, resrcparam/0,
	 ridparam/0, ridval/0, roleparam/0, rrule/0, rrulparam/0,
	 rstatparam/0, rstatus/0, rsvpparam/0, seconds/0,
	 sentbyparam/0, seq/0, seqparam/0, setposday/0,
	 standardc/0, statcode/0, statdesc/0, statparam/0,
	 status/0, statvalue/0, 'statvalue-event'/0,
	 'statvalue-jour'/0, 'statvalue-todo'/0, stmparam/0,
	 summary/0, summparam/0, text/0, time/0, 'time-hour'/0,
	 'time-minute'/0, 'time-numzone'/0, 'time-second'/0,
	 'time-utc'/0, timezonec/0, todoc/0, todoprop/0,
	 toparam/0, transp/0, transparam/0, transvalue/0,
	 trigabs/0, trigger/0, trigrel/0, trigrelparam/0, tzid/0,
	 tzidparam/0, tzidprefix/0, tzidpropparam/0, tzname/0,
	 tznparam/0, tzoffsetfrom/0, tzoffsetto/0, tzprop/0,
	 tzurl/0, tzurlparam/0, uid/0, uidparam/0, url/0,
	 urlparam/0, 'utc-offset'/0, value/0, valuetype/0,
	 valuetypeparam/0, vendorid/0, verparam/0, version/0,
	 vervalue/0, weekday/0, weekdaynum/0, weeknum/0,
	 'x-comp'/0, 'x-name'/0, 'x-param'/0, 'x-prop'/0,
	 yeardaynum/0]).

-include("rfc5545.hrl").

decode(contentline, Str) -> (contentline())(Str);
decode(name, Str) -> (name())(Str);
decode('iana-token', Str) -> ('iana-token'())(Str);
decode('x-name', Str) -> ('x-name'())(Str);
decode(vendorid, Str) -> (vendorid())(Str);
decode(param, Str) -> (param())(Str);
decode('param-name', Str) -> ('param-name'())(Str);
decode('param-value', Str) -> ('param-value'())(Str);
decode(paramtext, Str) -> (paramtext())(Str);
decode(value, Str) -> (value())(Str);
decode('quoted-string', Str) ->
    ('quoted-string'())(Str);
decode('QSAFE-CHAR', Str) -> ('QSAFE-CHAR'())(Str);
decode('SAFE-CHAR', Str) -> ('SAFE-CHAR'())(Str);
decode('VALUE-CHAR', Str) -> ('VALUE-CHAR'())(Str);
decode('NON-US-ASCII', Str) -> ('NON-US-ASCII'())(Str);
decode('CONTROL', Str) -> ('CONTROL'())(Str);
decode(icalparameter, Str) -> (icalparameter())(Str);
decode('other-param', Str) -> ('other-param'())(Str);
decode('iana-param', Str) -> ('iana-param'())(Str);
decode('x-param', Str) -> ('x-param'())(Str);
decode(altrepparam, Str) -> (altrepparam())(Str);
decode(cnparam, Str) -> (cnparam())(Str);
decode(cutypeparam, Str) -> (cutypeparam())(Str);
decode(delfromparam, Str) -> (delfromparam())(Str);
decode(deltoparam, Str) -> (deltoparam())(Str);
decode(dirparam, Str) -> (dirparam())(Str);
decode(encodingparam, Str) -> (encodingparam())(Str);
decode(fmttypeparam, Str) -> (fmttypeparam())(Str);
decode(fbtypeparam, Str) -> (fbtypeparam())(Str);
decode(languageparam, Str) -> (languageparam())(Str);
decode(language, Str) -> (language())(Str);
decode(memberparam, Str) -> (memberparam())(Str);
decode(partstatparam, Str) -> (partstatparam())(Str);
decode('partstat-event', Str) ->
    ('partstat-event'())(Str);
decode('partstat-todo', Str) ->
    ('partstat-todo'())(Str);
decode('partstat-jour', Str) ->
    ('partstat-jour'())(Str);
decode(rangeparam, Str) -> (rangeparam())(Str);
decode(trigrelparam, Str) -> (trigrelparam())(Str);
decode(reltypeparam, Str) -> (reltypeparam())(Str);
decode(roleparam, Str) -> (roleparam())(Str);
decode(rsvpparam, Str) -> (rsvpparam())(Str);
decode(sentbyparam, Str) -> (sentbyparam())(Str);
decode(tzidparam, Str) -> (tzidparam())(Str);
decode(tzidprefix, Str) -> (tzidprefix())(Str);
decode(valuetypeparam, Str) -> (valuetypeparam())(Str);
decode(valuetype, Str) -> (valuetype())(Str);
decode(binary, Str) -> (binary())(Str);
decode('b-end', Str) -> ('b-end'())(Str);
decode('b-char', Str) -> ('b-char'())(Str);
decode(boolean, Str) -> (boolean())(Str);
decode('cal-address', Str) -> ('cal-address'())(Str);
decode(date, Str) -> (date())(Str);
decode('date-value', Str) -> ('date-value'())(Str);
decode('date-fullyear', Str) ->
    ('date-fullyear'())(Str);
decode('date-month', Str) -> ('date-month'())(Str);
decode('date-mday', Str) -> ('date-mday'())(Str);
decode('date-time', Str) -> ('date-time'())(Str);
decode('dur-value', Str) -> ('dur-value'())(Str);
decode('dur-date', Str) -> ('dur-date'())(Str);
decode('dur-time', Str) -> ('dur-time'())(Str);
decode('dur-week', Str) -> ('dur-week'())(Str);
decode('dur-hour', Str) -> ('dur-hour'())(Str);
decode('dur-minute', Str) -> ('dur-minute'())(Str);
decode('dur-second', Str) -> ('dur-second'())(Str);
decode('dur-day', Str) -> ('dur-day'())(Str);
decode(float, Str) -> (float())(Str);
decode(integer, Str) -> (integer())(Str);
decode(period, Str) -> (period())(Str);
decode('period-explicit', Str) ->
    ('period-explicit'())(Str);
decode('period-start', Str) -> ('period-start'())(Str);
decode(recur, Str) -> (recur())(Str);
decode('recur-rule-part', Str) ->
    ('recur-rule-part'())(Str);
decode(freq, Str) -> (freq())(Str);
decode(enddate, Str) -> (enddate())(Str);
decode(byseclist, Str) -> (byseclist())(Str);
decode(seconds, Str) -> (seconds())(Str);
decode(byminlist, Str) -> (byminlist())(Str);
decode(minutes, Str) -> (minutes())(Str);
decode(byhrlist, Str) -> (byhrlist())(Str);
decode(hour, Str) -> (hour())(Str);
decode(bywdaylist, Str) -> (bywdaylist())(Str);
decode(weekdaynum, Str) -> (weekdaynum())(Str);
decode(plus, Str) -> (plus())(Str);
decode(minus, Str) -> (minus())(Str);
decode(ordwk, Str) -> (ordwk())(Str);
decode(weekday, Str) -> (weekday())(Str);
decode(bymodaylist, Str) -> (bymodaylist())(Str);
decode(monthdaynum, Str) -> (monthdaynum())(Str);
decode(ordmoday, Str) -> (ordmoday())(Str);
decode(byyrdaylist, Str) -> (byyrdaylist())(Str);
decode(yeardaynum, Str) -> (yeardaynum())(Str);
decode(ordyrday, Str) -> (ordyrday())(Str);
decode(bywknolist, Str) -> (bywknolist())(Str);
decode(weeknum, Str) -> (weeknum())(Str);
decode(bymolist, Str) -> (bymolist())(Str);
decode(monthnum, Str) -> (monthnum())(Str);
decode(bysplist, Str) -> (bysplist())(Str);
decode(setposday, Str) -> (setposday())(Str);
decode(text, Str) -> (text())(Str);
decode('ESCAPED-CHAR', Str) -> ('ESCAPED-CHAR'())(Str);
decode('TSAFE-CHAR', Str) -> ('TSAFE-CHAR'())(Str);
decode(time, Str) -> (time())(Str);
decode('time-hour', Str) -> ('time-hour'())(Str);
decode('time-minute', Str) -> ('time-minute'())(Str);
decode('time-second', Str) -> ('time-second'())(Str);
decode('time-utc', Str) -> ('time-utc'())(Str);
decode('utc-offset', Str) -> ('utc-offset'())(Str);
decode('time-numzone', Str) -> ('time-numzone'())(Str);
decode(icalstream, Str) -> (icalstream())(Str);
decode(icalobject, Str) -> (icalobject())(Str);
decode(icalbody, Str) -> (icalbody())(Str);
decode(calprops, Str) -> (calprops())(Str);
decode('iana-comp', Str) -> ('iana-comp'())(Str);
decode('x-comp', Str) -> ('x-comp'())(Str);
decode(eventc, Str) -> (eventc())(Str);
decode(eventprop, Str) -> (eventprop())(Str);
decode(todoc, Str) -> (todoc())(Str);
decode(todoprop, Str) -> (todoprop())(Str);
decode(journalc, Str) -> (journalc())(Str);
decode(jourprop, Str) -> (jourprop())(Str);
decode(freebusyc, Str) -> (freebusyc())(Str);
decode(fbprop, Str) -> (fbprop())(Str);
decode(timezonec, Str) -> (timezonec())(Str);
decode(standardc, Str) -> (standardc())(Str);
decode(daylightc, Str) -> (daylightc())(Str);
decode(tzprop, Str) -> (tzprop())(Str);
decode(alarmc, Str) -> (alarmc())(Str);
decode(audioprop, Str) -> (audioprop())(Str);
decode(dispprop, Str) -> (dispprop())(Str);
decode(emailprop, Str) -> (emailprop())(Str);
decode(calscale, Str) -> (calscale())(Str);
decode(calparam, Str) -> (calparam())(Str);
decode(calvalue, Str) -> (calvalue())(Str);
decode(method, Str) -> (method())(Str);
decode(metparam, Str) -> (metparam())(Str);
decode(metvalue, Str) -> (metvalue())(Str);
decode(prodid, Str) -> (prodid())(Str);
decode(pidparam, Str) -> (pidparam())(Str);
decode(pidvalue, Str) -> (pidvalue())(Str);
decode(version, Str) -> (version())(Str);
decode(verparam, Str) -> (verparam())(Str);
decode(vervalue, Str) -> (vervalue())(Str);
decode(minver, Str) -> (minver())(Str);
decode(maxver, Str) -> (maxver())(Str);
decode(attach, Str) -> (attach())(Str);
decode(attachparam, Str) -> (attachparam())(Str);
decode(categories, Str) -> (categories())(Str);
decode(catparam, Str) -> (catparam())(Str);
decode(class, Str) -> (class())(Str);
decode(classparam, Str) -> (classparam())(Str);
decode(classvalue, Str) -> (classvalue())(Str);
decode(comment, Str) -> (comment())(Str);
decode(commparam, Str) -> (commparam())(Str);
decode(description, Str) -> (description())(Str);
decode(descparam, Str) -> (descparam())(Str);
decode(geo, Str) -> (geo())(Str);
decode(geoparam, Str) -> (geoparam())(Str);
decode(geovalue, Str) -> (geovalue())(Str);
decode(location, Str) -> (location())(Str);
decode(locparam, Str) -> (locparam())(Str);
decode(percent, Str) -> (percent())(Str);
decode(pctparam, Str) -> (pctparam())(Str);
decode(priority, Str) -> (priority())(Str);
decode(prioparam, Str) -> (prioparam())(Str);
decode(priovalue, Str) -> (priovalue())(Str);
decode(resources, Str) -> (resources())(Str);
decode(resrcparam, Str) -> (resrcparam())(Str);
decode(status, Str) -> (status())(Str);
decode(statparam, Str) -> (statparam())(Str);
decode(statvalue, Str) -> (statvalue())(Str);
decode('statvalue-event', Str) ->
    ('statvalue-event'())(Str);
decode('statvalue-todo', Str) ->
    ('statvalue-todo'())(Str);
decode('statvalue-jour', Str) ->
    ('statvalue-jour'())(Str);
decode(summary, Str) -> (summary())(Str);
decode(summparam, Str) -> (summparam())(Str);
decode(completed, Str) -> (completed())(Str);
decode(compparam, Str) -> (compparam())(Str);
decode(dtend, Str) -> (dtend())(Str);
decode(dtendparam, Str) -> (dtendparam())(Str);
decode(dtendval, Str) -> (dtendval())(Str);
decode(due, Str) -> (due())(Str);
decode(dueparam, Str) -> (dueparam())(Str);
decode(dueval, Str) -> (dueval())(Str);
decode(dtstart, Str) -> (dtstart())(Str);
decode(dtstparam, Str) -> (dtstparam())(Str);
decode(dtstval, Str) -> (dtstval())(Str);
decode(duration, Str) -> (duration())(Str);
decode(durparam, Str) -> (durparam())(Str);
decode(freebusy, Str) -> (freebusy())(Str);
decode(fbparam, Str) -> (fbparam())(Str);
decode(fbvalue, Str) -> (fbvalue())(Str);
decode(transp, Str) -> (transp())(Str);
decode(transparam, Str) -> (transparam())(Str);
decode(transvalue, Str) -> (transvalue())(Str);
decode(tzid, Str) -> (tzid())(Str);
decode(tzidpropparam, Str) -> (tzidpropparam())(Str);
decode(tzname, Str) -> (tzname())(Str);
decode(tznparam, Str) -> (tznparam())(Str);
decode(tzoffsetfrom, Str) -> (tzoffsetfrom())(Str);
decode(frmparam, Str) -> (frmparam())(Str);
decode(tzoffsetto, Str) -> (tzoffsetto())(Str);
decode(toparam, Str) -> (toparam())(Str);
decode(tzurl, Str) -> (tzurl())(Str);
decode(tzurlparam, Str) -> (tzurlparam())(Str);
decode(attendee, Str) -> (attendee())(Str);
decode(attparam, Str) -> (attparam())(Str);
decode(contact, Str) -> (contact())(Str);
decode(contparam, Str) -> (contparam())(Str);
decode(organizer, Str) -> (organizer())(Str);
decode(orgparam, Str) -> (orgparam())(Str);
decode(recurid, Str) -> (recurid())(Str);
decode(ridparam, Str) -> (ridparam())(Str);
decode(ridval, Str) -> (ridval())(Str);
decode(related, Str) -> (related())(Str);
decode(relparam, Str) -> (relparam())(Str);
decode(url, Str) -> (url())(Str);
decode(urlparam, Str) -> (urlparam())(Str);
decode(uid, Str) -> (uid())(Str);
decode(uidparam, Str) -> (uidparam())(Str);
decode(exdate, Str) -> (exdate())(Str);
decode(exdtparam, Str) -> (exdtparam())(Str);
decode(exdtval, Str) -> (exdtval())(Str);
decode(rdate, Str) -> (rdate())(Str);
decode(rdtparam, Str) -> (rdtparam())(Str);
decode(rdtval, Str) -> (rdtval())(Str);
decode(rrule, Str) -> (rrule())(Str);
decode(rrulparam, Str) -> (rrulparam())(Str);
decode(action, Str) -> (action())(Str);
decode(actionparam, Str) -> (actionparam())(Str);
decode(actionvalue, Str) -> (actionvalue())(Str);
decode(repeat, Str) -> (repeat())(Str);
decode(repparam, Str) -> (repparam())(Str);
decode(trigger, Str) -> (trigger())(Str);
decode(trigrel, Str) -> (trigrel())(Str);
decode(trigabs, Str) -> (trigabs())(Str);
decode(created, Str) -> (created())(Str);
decode(creaparam, Str) -> (creaparam())(Str);
decode(dtstamp, Str) -> (dtstamp())(Str);
decode(stmparam, Str) -> (stmparam())(Str);
decode('last-mod', Str) -> ('last-mod'())(Str);
decode(lstparam, Str) -> (lstparam())(Str);
decode(seq, Str) -> (seq())(Str);
decode(seqparam, Str) -> (seqparam())(Str);
decode('iana-prop', Str) -> ('iana-prop'())(Str);
decode('x-prop', Str) -> ('x-prop'())(Str);
decode(rstatus, Str) -> (rstatus())(Str);
decode(rstatparam, Str) -> (rstatparam())(Str);
decode(statcode, Str) -> (statcode())(Str);
decode(statdesc, Str) -> (statdesc())(Str);
decode(extdata, Str) -> (extdata())(Str);
decode(component, Str) -> (component())(Str);
decode(optinfo, Str) -> (optinfo())(Str);
decode(infovalue, Str) -> (infovalue())(Str);
decode(qinfovalue, Str) -> (qinfovalue())(Str).

contentline() ->
    '__seq'([name(),
	     '__repeat'(0, infinity,
			'__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 param()])),
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     value(), 'CRLF'()]).

name() -> '__alt'(['iana-token'(), 'x-name'()]).

'iana-token'() ->
    '__repeat'(1, infinity,
	       '__alt'([fun ([C | Tl]) when C == 45 -> {ok, C, Tl};
			    (_) -> fail
			end,
			'ALPHA'(), 'DIGIT'()])).

'x-name'() ->
    '__seq'([fun ([C1, C2 | Tl])
		     when (C1 == 120) or (C1 == 88), C2 == 45 ->
		     {ok, [C1, C2], Tl};
		 (_) -> fail
	     end,
	     '__repeat'(0, 1,
			'__seq'([vendorid(),
				 fun ([45 | Tl]) -> {ok, 45, Tl};
				     (_) -> fail
				 end])),
	     '__repeat'(1, infinity,
			'__alt'([fun ([C | Tl]) when C == 45 -> {ok, C, Tl};
				     (_) -> fail
				 end,
				 'ALPHA'(), 'DIGIT'()]))]).

vendorid() ->
    '__repeat'(3, infinity,
	       '__alt'(['ALPHA'(), 'DIGIT'()])).

param() ->
    '__seq'(['param-name'(),
	     fun ([61 | Tl]) -> {ok, 61, Tl};
		 (_) -> fail
	     end,
	     'param-value'(),
	     '__repeat'(0, infinity,
			'__seq'([fun ([44 | Tl]) -> {ok, 44, Tl};
				     (_) -> fail
				 end,
				 'param-value'()]))]).

'param-name'() -> '__alt'(['iana-token'(), 'x-name'()]).

'param-value'() ->
    '__alt'([paramtext(), 'quoted-string'()]).

paramtext() -> '__repeat'(0, infinity, 'SAFE-CHAR'()).

value() -> '__repeat'(0, infinity, 'VALUE-CHAR'()).

'quoted-string'() ->
    '__seq'(['DQUOTE'(),
	     '__repeat'(0, infinity, 'QSAFE-CHAR'()), 'DQUOTE'()]).

'QSAFE-CHAR'() ->
    '__alt'([fun ([C | Tl]) when (C >= 35) and (C =< 126) ->
		     {ok, C, Tl};
		 ([C | Tl]) when C == 33 -> {ok, C, Tl};
		 (_) -> fail
	     end,
	     'WSP'(), 'NON-US-ASCII'()]).

'SAFE-CHAR'() ->
    '__alt'([fun ([C | Tl]) when (C >= 60) and (C =< 126) ->
		     {ok, C, Tl};
		 ([C | Tl]) when (C >= 45) and (C =< 57) -> {ok, C, Tl};
		 ([C | Tl]) when (C >= 35) and (C =< 43) -> {ok, C, Tl};
		 ([C | Tl]) when C == 33 -> {ok, C, Tl};
		 (_) -> fail
	     end,
	     'WSP'(), 'NON-US-ASCII'()]).

'VALUE-CHAR'() ->
    '__alt'([fun ([C | Tl]) when (C >= 33) and (C =< 126) ->
		     {ok, C, Tl};
		 (_) -> fail
	     end,
	     'WSP'(), 'NON-US-ASCII'()]).

'NON-US-ASCII'() ->
    '__alt'(['UTF8-2'(), 'UTF8-3'(), 'UTF8-tail'()]).

'CONTROL'() ->
    fun ([C | Tl]) when (C >= 10) and (C =< 31) ->
	    {ok, C, Tl};
	([C | Tl]) when (C >= 0) and (C =< 8) -> {ok, C, Tl};
	([C | Tl]) when C == 127 -> {ok, C, Tl};
	(_) -> fail
    end.

icalparameter() ->
    '__alt'([altrepparam(), cnparam(), cutypeparam(),
	     delfromparam(), deltoparam(), dirparam(),
	     encodingparam(), fmttypeparam(), fbtypeparam(),
	     languageparam(), memberparam(), partstatparam(),
	     rangeparam(), trigrelparam(), reltypeparam(),
	     roleparam(), rsvpparam(), sentbyparam(), tzidparam(),
	     valuetypeparam(), 'other-param'()]).

'other-param'() ->
    '__alt'(['iana-param'(), 'x-param'()]).

'iana-param'() ->
    '__seq'(['iana-token'(),
	     fun ([61 | Tl]) -> {ok, 61, Tl};
		 (_) -> fail
	     end,
	     'param-value'(),
	     '__repeat'(0, infinity,
			'__seq'([fun ([44 | Tl]) -> {ok, 44, Tl};
				     (_) -> fail
				 end,
				 'param-value'()]))]).

'x-param'() ->
    '__seq'(['x-name'(),
	     fun ([61 | Tl]) -> {ok, 61, Tl};
		 (_) -> fail
	     end,
	     'param-value'(),
	     '__repeat'(0, infinity,
			'__seq'([fun ([44 | Tl]) -> {ok, 44, Tl};
				     (_) -> fail
				 end,
				 'param-value'()]))]).

altrepparam() ->
    '__seq'([fun ([C1, C2, C3, C4, C5, C6 | Tl])
		     when (C1 == 97) or (C1 == 65),
			  (C2 == 108) or (C2 == 76), (C3 == 116) or (C3 == 84),
			  (C4 == 114) or (C4 == 82), (C5 == 101) or (C5 == 69),
			  (C6 == 112) or (C6 == 80) ->
		     {ok, [C1, C2, C3, C4, C5, C6], Tl};
		 (_) -> fail
	     end,
	     fun ([61 | Tl]) -> {ok, 61, Tl};
		 (_) -> fail
	     end,
	     'DQUOTE'(), uri(), 'DQUOTE'()]).

cnparam() ->
    '__seq'([fun ([C1, C2 | Tl])
		     when (C1 == 99) or (C1 == 67),
			  (C2 == 110) or (C2 == 78) ->
		     {ok, [C1, C2], Tl};
		 (_) -> fail
	     end,
	     fun ([61 | Tl]) -> {ok, 61, Tl};
		 (_) -> fail
	     end,
	     'param-value'()]).

cutypeparam() ->
    '__seq'([fun ([C1, C2, C3, C4, C5, C6 | Tl])
		     when (C1 == 99) or (C1 == 67),
			  (C2 == 117) or (C2 == 85), (C3 == 116) or (C3 == 84),
			  (C4 == 121) or (C4 == 89), (C5 == 112) or (C5 == 80),
			  (C6 == 101) or (C6 == 69) ->
		     {ok, [C1, C2, C3, C4, C5, C6], Tl};
		 (_) -> fail
	     end,
	     fun ([61 | Tl]) -> {ok, 61, Tl};
		 (_) -> fail
	     end,
	     '__alt'([fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9, C10
			    | Tl])
			      when (C1 == 105) or (C1 == 73),
				   (C2 == 110) or (C2 == 78), (C3 == 100) or (C3 == 68),
				   (C4 == 105) or (C4 == 73), (C5 == 118) or (C5 == 86),
				   (C6 == 105) or (C6 == 73), (C7 == 100) or (C7 == 68),
				   (C8 == 117) or (C8 == 85), (C9 == 97) or (C9 == 65),
				   (C10 == 108) or (C10 == 76) ->
			      {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10], Tl};
			  (_) -> fail
		      end,
		      fun ([C1, C2, C3, C4, C5 | Tl])
			      when (C1 == 103) or (C1 == 71),
				   (C2 == 114) or (C2 == 82), (C3 == 111) or (C3 == 79),
				   (C4 == 117) or (C4 == 85), (C5 == 112) or (C5 == 80) ->
			      {ok, [C1, C2, C3, C4, C5], Tl};
			  (_) -> fail
		      end,
		      fun ([C1, C2, C3, C4, C5, C6, C7, C8 | Tl])
			      when (C1 == 114) or (C1 == 82),
				   (C2 == 101) or (C2 == 69), (C3 == 115) or (C3 == 83),
				   (C4 == 111) or (C4 == 79), (C5 == 117) or (C5 == 85),
				   (C6 == 114) or (C6 == 82), (C7 == 99) or (C7 == 67),
				   (C8 == 101) or (C8 == 69) ->
			      {ok, [C1, C2, C3, C4, C5, C6, C7, C8], Tl};
			  (_) -> fail
		      end,
		      fun ([C1, C2, C3, C4 | Tl])
			      when (C1 == 114) or (C1 == 82),
				   (C2 == 111) or (C2 == 79), (C3 == 111) or (C3 == 79),
				   (C4 == 109) or (C4 == 77) ->
			      {ok, [C1, C2, C3, C4], Tl};
			  (_) -> fail
		      end,
		      fun ([C1, C2, C3, C4, C5, C6, C7 | Tl])
			      when (C1 == 117) or (C1 == 85),
				   (C2 == 110) or (C2 == 78), (C3 == 107) or (C3 == 75),
				   (C4 == 110) or (C4 == 78), (C5 == 111) or (C5 == 79),
				   (C6 == 119) or (C6 == 87), (C7 == 110) or (C7 == 78) ->
			      {ok, [C1, C2, C3, C4, C5, C6, C7], Tl};
			  (_) -> fail
		      end,
		      'x-name'(), 'iana-token'()])]).

delfromparam() ->
    '__seq'([fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9, C10,
		   C11, C12, C13, C14
		   | Tl])
		     when (C1 == 100) or (C1 == 68),
			  (C2 == 101) or (C2 == 69), (C3 == 108) or (C3 == 76),
			  (C4 == 101) or (C4 == 69), (C5 == 103) or (C5 == 71),
			  (C6 == 97) or (C6 == 65), (C7 == 116) or (C7 == 84),
			  (C8 == 101) or (C8 == 69), (C9 == 100) or (C9 == 68),
			  C10 == 45, (C11 == 102) or (C11 == 70),
			  (C12 == 114) or (C12 == 82),
			  (C13 == 111) or (C13 == 79),
			  (C14 == 109) or (C14 == 77) ->
		     {ok,
		      [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13,
		       C14],
		      Tl};
		 (_) -> fail
	     end,
	     fun ([61 | Tl]) -> {ok, 61, Tl};
		 (_) -> fail
	     end,
	     'DQUOTE'(), 'cal-address'(), 'DQUOTE'(),
	     '__repeat'(0, infinity,
			'__seq'([fun ([44 | Tl]) -> {ok, 44, Tl};
				     (_) -> fail
				 end,
				 'DQUOTE'(), 'cal-address'(), 'DQUOTE'()]))]).

deltoparam() ->
    '__seq'([fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9, C10,
		   C11, C12
		   | Tl])
		     when (C1 == 100) or (C1 == 68),
			  (C2 == 101) or (C2 == 69), (C3 == 108) or (C3 == 76),
			  (C4 == 101) or (C4 == 69), (C5 == 103) or (C5 == 71),
			  (C6 == 97) or (C6 == 65), (C7 == 116) or (C7 == 84),
			  (C8 == 101) or (C8 == 69), (C9 == 100) or (C9 == 68),
			  C10 == 45, (C11 == 116) or (C11 == 84),
			  (C12 == 111) or (C12 == 79) ->
		     {ok,
		      [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12],
		      Tl};
		 (_) -> fail
	     end,
	     fun ([61 | Tl]) -> {ok, 61, Tl};
		 (_) -> fail
	     end,
	     'DQUOTE'(), 'cal-address'(), 'DQUOTE'(),
	     '__repeat'(0, infinity,
			'__seq'([fun ([44 | Tl]) -> {ok, 44, Tl};
				     (_) -> fail
				 end,
				 'DQUOTE'(), 'cal-address'(), 'DQUOTE'()]))]).

dirparam() ->
    '__seq'([fun ([C1, C2, C3 | Tl])
		     when (C1 == 100) or (C1 == 68),
			  (C2 == 105) or (C2 == 73), (C3 == 114) or (C3 == 82) ->
		     {ok, [C1, C2, C3], Tl};
		 (_) -> fail
	     end,
	     fun ([61 | Tl]) -> {ok, 61, Tl};
		 (_) -> fail
	     end,
	     'DQUOTE'(), uri(), 'DQUOTE'()]).

encodingparam() ->
    '__seq'([fun ([C1, C2, C3, C4, C5, C6, C7, C8 | Tl])
		     when (C1 == 101) or (C1 == 69),
			  (C2 == 110) or (C2 == 78), (C3 == 99) or (C3 == 67),
			  (C4 == 111) or (C4 == 79), (C5 == 100) or (C5 == 68),
			  (C6 == 105) or (C6 == 73), (C7 == 110) or (C7 == 78),
			  (C8 == 103) or (C8 == 71) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8], Tl};
		 (_) -> fail
	     end,
	     fun ([61 | Tl]) -> {ok, 61, Tl};
		 (_) -> fail
	     end,
	     '__alt'([fun ([C1, C2, C3, C4 | Tl])
			      when C1 == 56, (C2 == 98) or (C2 == 66),
				   (C3 == 105) or (C3 == 73), (C4 == 116) or (C4 == 84) ->
			      {ok, [C1, C2, C3, C4], Tl};
			  (_) -> fail
		      end,
		      fun ([C1, C2, C3, C4, C5, C6 | Tl])
			      when (C1 == 98) or (C1 == 66), (C2 == 97) or (C2 == 65),
				   (C3 == 115) or (C3 == 83), (C4 == 101) or (C4 == 69),
				   C5 == 54, C6 == 52 ->
			      {ok, [C1, C2, C3, C4, C5, C6], Tl};
			  (_) -> fail
		      end])]).

fmttypeparam() ->
    '__seq'([fun ([C1, C2, C3, C4, C5, C6, C7 | Tl])
		     when (C1 == 102) or (C1 == 70),
			  (C2 == 109) or (C2 == 77), (C3 == 116) or (C3 == 84),
			  (C4 == 116) or (C4 == 84), (C5 == 121) or (C5 == 89),
			  (C6 == 112) or (C6 == 80), (C7 == 101) or (C7 == 69) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7], Tl};
		 (_) -> fail
	     end,
	     fun ([61 | Tl]) -> {ok, 61, Tl};
		 (_) -> fail
	     end,
	     'type-name'(),
	     fun ([47 | Tl]) -> {ok, 47, Tl};
		 (_) -> fail
	     end,
	     'subtype-name'()]).

fbtypeparam() ->
    '__seq'([fun ([C1, C2, C3, C4, C5, C6 | Tl])
		     when (C1 == 102) or (C1 == 70),
			  (C2 == 98) or (C2 == 66), (C3 == 116) or (C3 == 84),
			  (C4 == 121) or (C4 == 89), (C5 == 112) or (C5 == 80),
			  (C6 == 101) or (C6 == 69) ->
		     {ok, [C1, C2, C3, C4, C5, C6], Tl};
		 (_) -> fail
	     end,
	     fun ([61 | Tl]) -> {ok, 61, Tl};
		 (_) -> fail
	     end,
	     '__alt'([fun ([C1, C2, C3, C4 | Tl])
			      when (C1 == 102) or (C1 == 70),
				   (C2 == 114) or (C2 == 82), (C3 == 101) or (C3 == 69),
				   (C4 == 101) or (C4 == 69) ->
			      {ok, [C1, C2, C3, C4], Tl};
			  (_) -> fail
		      end,
		      fun ([C1, C2, C3, C4 | Tl])
			      when (C1 == 98) or (C1 == 66),
				   (C2 == 117) or (C2 == 85), (C3 == 115) or (C3 == 83),
				   (C4 == 121) or (C4 == 89) ->
			      {ok, [C1, C2, C3, C4], Tl};
			  (_) -> fail
		      end,
		      fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12,
			    C13, C14, C15, C16
			    | Tl])
			      when (C1 == 98) or (C1 == 66),
				   (C2 == 117) or (C2 == 85), (C3 == 115) or (C3 == 83),
				   (C4 == 121) or (C4 == 89), C5 == 45,
				   (C6 == 117) or (C6 == 85), (C7 == 110) or (C7 == 78),
				   (C8 == 97) or (C8 == 65), (C9 == 118) or (C9 == 86),
				   (C10 == 97) or (C10 == 65), (C11 == 105) or (C11 == 73),
				   (C12 == 108) or (C12 == 76), (C13 == 97) or (C13 == 65),
				   (C14 == 98) or (C14 == 66), (C15 == 108) or (C15 == 76),
				   (C16 == 101) or (C16 == 69) ->
			      {ok,
			       [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13,
				C14, C15, C16],
			       Tl};
			  (_) -> fail
		      end,
		      fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12,
			    C13, C14
			    | Tl])
			      when (C1 == 98) or (C1 == 66),
				   (C2 == 117) or (C2 == 85), (C3 == 115) or (C3 == 83),
				   (C4 == 121) or (C4 == 89), C5 == 45,
				   (C6 == 116) or (C6 == 84), (C7 == 101) or (C7 == 69),
				   (C8 == 110) or (C8 == 78), (C9 == 116) or (C9 == 84),
				   (C10 == 97) or (C10 == 65), (C11 == 116) or (C11 == 84),
				   (C12 == 105) or (C12 == 73),
				   (C13 == 118) or (C13 == 86),
				   (C14 == 101) or (C14 == 69) ->
			      {ok,
			       [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13,
				C14],
			       Tl};
			  (_) -> fail
		      end,
		      'x-name'(), 'iana-token'()])]).

languageparam() ->
    '__seq'([fun ([C1, C2, C3, C4, C5, C6, C7, C8 | Tl])
		     when (C1 == 108) or (C1 == 76),
			  (C2 == 97) or (C2 == 65), (C3 == 110) or (C3 == 78),
			  (C4 == 103) or (C4 == 71), (C5 == 117) or (C5 == 85),
			  (C6 == 97) or (C6 == 65), (C7 == 103) or (C7 == 71),
			  (C8 == 101) or (C8 == 69) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8], Tl};
		 (_) -> fail
	     end,
	     fun ([61 | Tl]) -> {ok, 61, Tl};
		 (_) -> fail
	     end,
	     language()]).

language() -> 'Language-Tag'().

memberparam() ->
    '__seq'([fun ([C1, C2, C3, C4, C5, C6 | Tl])
		     when (C1 == 109) or (C1 == 77),
			  (C2 == 101) or (C2 == 69), (C3 == 109) or (C3 == 77),
			  (C4 == 98) or (C4 == 66), (C5 == 101) or (C5 == 69),
			  (C6 == 114) or (C6 == 82) ->
		     {ok, [C1, C2, C3, C4, C5, C6], Tl};
		 (_) -> fail
	     end,
	     fun ([61 | Tl]) -> {ok, 61, Tl};
		 (_) -> fail
	     end,
	     'DQUOTE'(), 'cal-address'(), 'DQUOTE'(),
	     '__repeat'(0, infinity,
			'__seq'([fun ([44 | Tl]) -> {ok, 44, Tl};
				     (_) -> fail
				 end,
				 'DQUOTE'(), 'cal-address'(), 'DQUOTE'()]))]).

partstatparam() ->
    '__seq'([fun ([C1, C2, C3, C4, C5, C6, C7, C8 | Tl])
		     when (C1 == 112) or (C1 == 80),
			  (C2 == 97) or (C2 == 65), (C3 == 114) or (C3 == 82),
			  (C4 == 116) or (C4 == 84), (C5 == 115) or (C5 == 83),
			  (C6 == 116) or (C6 == 84), (C7 == 97) or (C7 == 65),
			  (C8 == 116) or (C8 == 84) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8], Tl};
		 (_) -> fail
	     end,
	     fun ([61 | Tl]) -> {ok, 61, Tl};
		 (_) -> fail
	     end,
	     '__alt'(['partstat-event'(), 'partstat-todo'(),
		      'partstat-jour'()])]).

'partstat-event'() ->
    '__alt'([fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9, C10,
		   C11, C12
		   | Tl])
		     when (C1 == 110) or (C1 == 78),
			  (C2 == 101) or (C2 == 69), (C3 == 101) or (C3 == 69),
			  (C4 == 100) or (C4 == 68), (C5 == 115) or (C5 == 83),
			  C6 == 45, (C7 == 97) or (C7 == 65),
			  (C8 == 99) or (C8 == 67), (C9 == 116) or (C9 == 84),
			  (C10 == 105) or (C10 == 73),
			  (C11 == 111) or (C11 == 79),
			  (C12 == 110) or (C12 == 78) ->
		     {ok,
		      [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12],
		      Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6, C7, C8 | Tl])
		     when (C1 == 97) or (C1 == 65), (C2 == 99) or (C2 == 67),
			  (C3 == 99) or (C3 == 67), (C4 == 101) or (C4 == 69),
			  (C5 == 112) or (C5 == 80), (C6 == 116) or (C6 == 84),
			  (C7 == 101) or (C7 == 69), (C8 == 100) or (C8 == 68) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6, C7, C8 | Tl])
		     when (C1 == 100) or (C1 == 68),
			  (C2 == 101) or (C2 == 69), (C3 == 99) or (C3 == 67),
			  (C4 == 108) or (C4 == 76), (C5 == 105) or (C5 == 73),
			  (C6 == 110) or (C6 == 78), (C7 == 101) or (C7 == 69),
			  (C8 == 100) or (C8 == 68) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9 | Tl])
		     when (C1 == 116) or (C1 == 84),
			  (C2 == 101) or (C2 == 69), (C3 == 110) or (C3 == 78),
			  (C4 == 116) or (C4 == 84), (C5 == 97) or (C5 == 65),
			  (C6 == 116) or (C6 == 84), (C7 == 105) or (C7 == 73),
			  (C8 == 118) or (C8 == 86), (C9 == 101) or (C9 == 69) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9 | Tl])
		     when (C1 == 100) or (C1 == 68),
			  (C2 == 101) or (C2 == 69), (C3 == 108) or (C3 == 76),
			  (C4 == 101) or (C4 == 69), (C5 == 103) or (C5 == 71),
			  (C6 == 97) or (C6 == 65), (C7 == 116) or (C7 == 84),
			  (C8 == 101) or (C8 == 69), (C9 == 100) or (C9 == 68) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9], Tl};
		 (_) -> fail
	     end,
	     'x-name'(), 'iana-token'()]).

'partstat-todo'() ->
    '__alt'([fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9, C10,
		   C11, C12
		   | Tl])
		     when (C1 == 110) or (C1 == 78),
			  (C2 == 101) or (C2 == 69), (C3 == 101) or (C3 == 69),
			  (C4 == 100) or (C4 == 68), (C5 == 115) or (C5 == 83),
			  C6 == 45, (C7 == 97) or (C7 == 65),
			  (C8 == 99) or (C8 == 67), (C9 == 116) or (C9 == 84),
			  (C10 == 105) or (C10 == 73),
			  (C11 == 111) or (C11 == 79),
			  (C12 == 110) or (C12 == 78) ->
		     {ok,
		      [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12],
		      Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6, C7, C8 | Tl])
		     when (C1 == 97) or (C1 == 65), (C2 == 99) or (C2 == 67),
			  (C3 == 99) or (C3 == 67), (C4 == 101) or (C4 == 69),
			  (C5 == 112) or (C5 == 80), (C6 == 116) or (C6 == 84),
			  (C7 == 101) or (C7 == 69), (C8 == 100) or (C8 == 68) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6, C7, C8 | Tl])
		     when (C1 == 100) or (C1 == 68),
			  (C2 == 101) or (C2 == 69), (C3 == 99) or (C3 == 67),
			  (C4 == 108) or (C4 == 76), (C5 == 105) or (C5 == 73),
			  (C6 == 110) or (C6 == 78), (C7 == 101) or (C7 == 69),
			  (C8 == 100) or (C8 == 68) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9 | Tl])
		     when (C1 == 116) or (C1 == 84),
			  (C2 == 101) or (C2 == 69), (C3 == 110) or (C3 == 78),
			  (C4 == 116) or (C4 == 84), (C5 == 97) or (C5 == 65),
			  (C6 == 116) or (C6 == 84), (C7 == 105) or (C7 == 73),
			  (C8 == 118) or (C8 == 86), (C9 == 101) or (C9 == 69) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9 | Tl])
		     when (C1 == 100) or (C1 == 68),
			  (C2 == 101) or (C2 == 69), (C3 == 108) or (C3 == 76),
			  (C4 == 101) or (C4 == 69), (C5 == 103) or (C5 == 71),
			  (C6 == 97) or (C6 == 65), (C7 == 116) or (C7 == 84),
			  (C8 == 101) or (C8 == 69), (C9 == 100) or (C9 == 68) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9 | Tl])
		     when (C1 == 99) or (C1 == 67),
			  (C2 == 111) or (C2 == 79), (C3 == 109) or (C3 == 77),
			  (C4 == 112) or (C4 == 80), (C5 == 108) or (C5 == 76),
			  (C6 == 101) or (C6 == 69), (C7 == 116) or (C7 == 84),
			  (C8 == 101) or (C8 == 69), (C9 == 100) or (C9 == 68) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9, C10 | Tl])
		     when (C1 == 105) or (C1 == 73),
			  (C2 == 110) or (C2 == 78), C3 == 45,
			  (C4 == 112) or (C4 == 80), (C5 == 114) or (C5 == 82),
			  (C6 == 111) or (C6 == 79), (C7 == 99) or (C7 == 67),
			  (C8 == 101) or (C8 == 69), (C9 == 115) or (C9 == 83),
			  (C10 == 115) or (C10 == 83) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10], Tl};
		 (_) -> fail
	     end,
	     'x-name'(), 'iana-token'()]).

'partstat-jour'() ->
    '__alt'([fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9, C10,
		   C11, C12
		   | Tl])
		     when (C1 == 110) or (C1 == 78),
			  (C2 == 101) or (C2 == 69), (C3 == 101) or (C3 == 69),
			  (C4 == 100) or (C4 == 68), (C5 == 115) or (C5 == 83),
			  C6 == 45, (C7 == 97) or (C7 == 65),
			  (C8 == 99) or (C8 == 67), (C9 == 116) or (C9 == 84),
			  (C10 == 105) or (C10 == 73),
			  (C11 == 111) or (C11 == 79),
			  (C12 == 110) or (C12 == 78) ->
		     {ok,
		      [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12],
		      Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6, C7, C8 | Tl])
		     when (C1 == 97) or (C1 == 65), (C2 == 99) or (C2 == 67),
			  (C3 == 99) or (C3 == 67), (C4 == 101) or (C4 == 69),
			  (C5 == 112) or (C5 == 80), (C6 == 116) or (C6 == 84),
			  (C7 == 101) or (C7 == 69), (C8 == 100) or (C8 == 68) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6, C7, C8 | Tl])
		     when (C1 == 100) or (C1 == 68),
			  (C2 == 101) or (C2 == 69), (C3 == 99) or (C3 == 67),
			  (C4 == 108) or (C4 == 76), (C5 == 105) or (C5 == 73),
			  (C6 == 110) or (C6 == 78), (C7 == 101) or (C7 == 69),
			  (C8 == 100) or (C8 == 68) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8], Tl};
		 (_) -> fail
	     end,
	     'x-name'(), 'iana-token'()]).

rangeparam() ->
    '__seq'([fun ([C1, C2, C3, C4, C5 | Tl])
		     when (C1 == 114) or (C1 == 82),
			  (C2 == 97) or (C2 == 65), (C3 == 110) or (C3 == 78),
			  (C4 == 103) or (C4 == 71), (C5 == 101) or (C5 == 69) ->
		     {ok, [C1, C2, C3, C4, C5], Tl};
		 (_) -> fail
	     end,
	     fun ([61 | Tl]) -> {ok, 61, Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12,
		   C13
		   | Tl])
		     when (C1 == 116) or (C1 == 84),
			  (C2 == 104) or (C2 == 72), (C3 == 105) or (C3 == 73),
			  (C4 == 115) or (C4 == 83), (C5 == 97) or (C5 == 65),
			  (C6 == 110) or (C6 == 78), (C7 == 100) or (C7 == 68),
			  (C8 == 102) or (C8 == 70), (C9 == 117) or (C9 == 85),
			  (C10 == 116) or (C10 == 84),
			  (C11 == 117) or (C11 == 85),
			  (C12 == 114) or (C12 == 82),
			  (C13 == 101) or (C13 == 69) ->
		     {ok,
		      [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12,
		       C13],
		      Tl};
		 (_) -> fail
	     end]).

trigrelparam() ->
    '__seq'([fun ([C1, C2, C3, C4, C5, C6, C7 | Tl])
		     when (C1 == 114) or (C1 == 82),
			  (C2 == 101) or (C2 == 69), (C3 == 108) or (C3 == 76),
			  (C4 == 97) or (C4 == 65), (C5 == 116) or (C5 == 84),
			  (C6 == 101) or (C6 == 69), (C7 == 100) or (C7 == 68) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7], Tl};
		 (_) -> fail
	     end,
	     fun ([61 | Tl]) -> {ok, 61, Tl};
		 (_) -> fail
	     end,
	     '__alt'([fun ([C1, C2, C3, C4, C5 | Tl])
			      when (C1 == 115) or (C1 == 83),
				   (C2 == 116) or (C2 == 84), (C3 == 97) or (C3 == 65),
				   (C4 == 114) or (C4 == 82), (C5 == 116) or (C5 == 84) ->
			      {ok, [C1, C2, C3, C4, C5], Tl};
			  (_) -> fail
		      end,
		      fun ([C1, C2, C3 | Tl])
			      when (C1 == 101) or (C1 == 69),
				   (C2 == 110) or (C2 == 78), (C3 == 100) or (C3 == 68) ->
			      {ok, [C1, C2, C3], Tl};
			  (_) -> fail
		      end])]).

reltypeparam() ->
    '__seq'([fun ([C1, C2, C3, C4, C5, C6, C7 | Tl])
		     when (C1 == 114) or (C1 == 82),
			  (C2 == 101) or (C2 == 69), (C3 == 108) or (C3 == 76),
			  (C4 == 116) or (C4 == 84), (C5 == 121) or (C5 == 89),
			  (C6 == 112) or (C6 == 80), (C7 == 101) or (C7 == 69) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7], Tl};
		 (_) -> fail
	     end,
	     fun ([61 | Tl]) -> {ok, 61, Tl};
		 (_) -> fail
	     end,
	     '__alt'([fun ([C1, C2, C3, C4, C5, C6 | Tl])
			      when (C1 == 112) or (C1 == 80),
				   (C2 == 97) or (C2 == 65), (C3 == 114) or (C3 == 82),
				   (C4 == 101) or (C4 == 69), (C5 == 110) or (C5 == 78),
				   (C6 == 116) or (C6 == 84) ->
			      {ok, [C1, C2, C3, C4, C5, C6], Tl};
			  (_) -> fail
		      end,
		      fun ([C1, C2, C3, C4, C5 | Tl])
			      when (C1 == 99) or (C1 == 67),
				   (C2 == 104) or (C2 == 72), (C3 == 105) or (C3 == 73),
				   (C4 == 108) or (C4 == 76), (C5 == 100) or (C5 == 68) ->
			      {ok, [C1, C2, C3, C4, C5], Tl};
			  (_) -> fail
		      end,
		      fun ([C1, C2, C3, C4, C5, C6, C7 | Tl])
			      when (C1 == 115) or (C1 == 83),
				   (C2 == 105) or (C2 == 73), (C3 == 98) or (C3 == 66),
				   (C4 == 108) or (C4 == 76), (C5 == 105) or (C5 == 73),
				   (C6 == 110) or (C6 == 78), (C7 == 103) or (C7 == 71) ->
			      {ok, [C1, C2, C3, C4, C5, C6, C7], Tl};
			  (_) -> fail
		      end,
		      'iana-token'(), 'x-name'()])]).

roleparam() ->
    '__seq'([fun ([C1, C2, C3, C4 | Tl])
		     when (C1 == 114) or (C1 == 82),
			  (C2 == 111) or (C2 == 79), (C3 == 108) or (C3 == 76),
			  (C4 == 101) or (C4 == 69) ->
		     {ok, [C1, C2, C3, C4], Tl};
		 (_) -> fail
	     end,
	     fun ([61 | Tl]) -> {ok, 61, Tl};
		 (_) -> fail
	     end,
	     '__alt'([fun ([C1, C2, C3, C4, C5 | Tl])
			      when (C1 == 99) or (C1 == 67),
				   (C2 == 104) or (C2 == 72), (C3 == 97) or (C3 == 65),
				   (C4 == 105) or (C4 == 73), (C5 == 114) or (C5 == 82) ->
			      {ok, [C1, C2, C3, C4, C5], Tl};
			  (_) -> fail
		      end,
		      fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12,
			    C13, C14, C15
			    | Tl])
			      when (C1 == 114) or (C1 == 82),
				   (C2 == 101) or (C2 == 69), (C3 == 113) or (C3 == 81),
				   C4 == 45, (C5 == 112) or (C5 == 80),
				   (C6 == 97) or (C6 == 65), (C7 == 114) or (C7 == 82),
				   (C8 == 116) or (C8 == 84), (C9 == 105) or (C9 == 73),
				   (C10 == 99) or (C10 == 67), (C11 == 105) or (C11 == 73),
				   (C12 == 112) or (C12 == 80), (C13 == 97) or (C13 == 65),
				   (C14 == 110) or (C14 == 78),
				   (C15 == 116) or (C15 == 84) ->
			      {ok,
			       [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13,
				C14, C15],
			       Tl};
			  (_) -> fail
		      end,
		      fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12,
			    C13, C14, C15
			    | Tl])
			      when (C1 == 111) or (C1 == 79),
				   (C2 == 112) or (C2 == 80), (C3 == 116) or (C3 == 84),
				   C4 == 45, (C5 == 112) or (C5 == 80),
				   (C6 == 97) or (C6 == 65), (C7 == 114) or (C7 == 82),
				   (C8 == 116) or (C8 == 84), (C9 == 105) or (C9 == 73),
				   (C10 == 99) or (C10 == 67), (C11 == 105) or (C11 == 73),
				   (C12 == 112) or (C12 == 80), (C13 == 97) or (C13 == 65),
				   (C14 == 110) or (C14 == 78),
				   (C15 == 116) or (C15 == 84) ->
			      {ok,
			       [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13,
				C14, C15],
			       Tl};
			  (_) -> fail
		      end,
		      fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12,
			    C13, C14, C15
			    | Tl])
			      when (C1 == 110) or (C1 == 78),
				   (C2 == 111) or (C2 == 79), (C3 == 110) or (C3 == 78),
				   C4 == 45, (C5 == 112) or (C5 == 80),
				   (C6 == 97) or (C6 == 65), (C7 == 114) or (C7 == 82),
				   (C8 == 116) or (C8 == 84), (C9 == 105) or (C9 == 73),
				   (C10 == 99) or (C10 == 67), (C11 == 105) or (C11 == 73),
				   (C12 == 112) or (C12 == 80), (C13 == 97) or (C13 == 65),
				   (C14 == 110) or (C14 == 78),
				   (C15 == 116) or (C15 == 84) ->
			      {ok,
			       [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13,
				C14, C15],
			       Tl};
			  (_) -> fail
		      end,
		      'x-name'(), 'iana-token'()])]).

rsvpparam() ->
    '__seq'([fun ([C1, C2, C3, C4 | Tl])
		     when (C1 == 114) or (C1 == 82),
			  (C2 == 115) or (C2 == 83), (C3 == 118) or (C3 == 86),
			  (C4 == 112) or (C4 == 80) ->
		     {ok, [C1, C2, C3, C4], Tl};
		 (_) -> fail
	     end,
	     fun ([61 | Tl]) -> {ok, 61, Tl};
		 (_) -> fail
	     end,
	     '__alt'([fun ([C1, C2, C3, C4 | Tl])
			      when (C1 == 116) or (C1 == 84),
				   (C2 == 114) or (C2 == 82), (C3 == 117) or (C3 == 85),
				   (C4 == 101) or (C4 == 69) ->
			      {ok, [C1, C2, C3, C4], Tl};
			  (_) -> fail
		      end,
		      fun ([C1, C2, C3, C4, C5 | Tl])
			      when (C1 == 102) or (C1 == 70),
				   (C2 == 97) or (C2 == 65), (C3 == 108) or (C3 == 76),
				   (C4 == 115) or (C4 == 83), (C5 == 101) or (C5 == 69) ->
			      {ok, [C1, C2, C3, C4, C5], Tl};
			  (_) -> fail
		      end])]).

sentbyparam() ->
    '__seq'([fun ([C1, C2, C3, C4, C5, C6, C7 | Tl])
		     when (C1 == 115) or (C1 == 83),
			  (C2 == 101) or (C2 == 69), (C3 == 110) or (C3 == 78),
			  (C4 == 116) or (C4 == 84), C5 == 45,
			  (C6 == 98) or (C6 == 66), (C7 == 121) or (C7 == 89) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7], Tl};
		 (_) -> fail
	     end,
	     fun ([61 | Tl]) -> {ok, 61, Tl};
		 (_) -> fail
	     end,
	     'DQUOTE'(), 'cal-address'(), 'DQUOTE'()]).

tzidparam() ->
    '__seq'([fun ([C1, C2, C3, C4 | Tl])
		     when (C1 == 116) or (C1 == 84),
			  (C2 == 122) or (C2 == 90), (C3 == 105) or (C3 == 73),
			  (C4 == 100) or (C4 == 68) ->
		     {ok, [C1, C2, C3, C4], Tl};
		 (_) -> fail
	     end,
	     fun ([61 | Tl]) -> {ok, 61, Tl};
		 (_) -> fail
	     end,
	     '__repeat'(0, 1, tzidprefix()), paramtext()]).

tzidprefix() ->
    fun ([47 | Tl]) -> {ok, 47, Tl};
	(_) -> fail
    end.

valuetypeparam() ->
    '__seq'([fun ([C1, C2, C3, C4, C5 | Tl])
		     when (C1 == 118) or (C1 == 86),
			  (C2 == 97) or (C2 == 65), (C3 == 108) or (C3 == 76),
			  (C4 == 117) or (C4 == 85), (C5 == 101) or (C5 == 69) ->
		     {ok, [C1, C2, C3, C4, C5], Tl};
		 (_) -> fail
	     end,
	     fun ([61 | Tl]) -> {ok, 61, Tl};
		 (_) -> fail
	     end,
	     valuetype()]).

valuetype() ->
    '__alt'([fun ([C1, C2, C3, C4, C5, C6 | Tl])
		     when (C1 == 98) or (C1 == 66),
			  (C2 == 105) or (C2 == 73), (C3 == 110) or (C3 == 78),
			  (C4 == 97) or (C4 == 65), (C5 == 114) or (C5 == 82),
			  (C6 == 121) or (C6 == 89) ->
		     {ok, [C1, C2, C3, C4, C5, C6], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6, C7 | Tl])
		     when (C1 == 98) or (C1 == 66),
			  (C2 == 111) or (C2 == 79), (C3 == 111) or (C3 == 79),
			  (C4 == 108) or (C4 == 76), (C5 == 101) or (C5 == 69),
			  (C6 == 97) or (C6 == 65), (C7 == 110) or (C7 == 78) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11
		   | Tl])
		     when (C1 == 99) or (C1 == 67), (C2 == 97) or (C2 == 65),
			  (C3 == 108) or (C3 == 76), C4 == 45,
			  (C5 == 97) or (C5 == 65), (C6 == 100) or (C6 == 68),
			  (C7 == 100) or (C7 == 68), (C8 == 114) or (C8 == 82),
			  (C9 == 101) or (C9 == 69), (C10 == 115) or (C10 == 83),
			  (C11 == 115) or (C11 == 83) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11],
		      Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4 | Tl])
		     when (C1 == 100) or (C1 == 68),
			  (C2 == 97) or (C2 == 65), (C3 == 116) or (C3 == 84),
			  (C4 == 101) or (C4 == 69) ->
		     {ok, [C1, C2, C3, C4], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9 | Tl])
		     when (C1 == 100) or (C1 == 68),
			  (C2 == 97) or (C2 == 65), (C3 == 116) or (C3 == 84),
			  (C4 == 101) or (C4 == 69), C5 == 45,
			  (C6 == 116) or (C6 == 84), (C7 == 105) or (C7 == 73),
			  (C8 == 109) or (C8 == 77), (C9 == 101) or (C9 == 69) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6, C7, C8 | Tl])
		     when (C1 == 100) or (C1 == 68),
			  (C2 == 117) or (C2 == 85), (C3 == 114) or (C3 == 82),
			  (C4 == 97) or (C4 == 65), (C5 == 116) or (C5 == 84),
			  (C6 == 105) or (C6 == 73), (C7 == 111) or (C7 == 79),
			  (C8 == 110) or (C8 == 78) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5 | Tl])
		     when (C1 == 102) or (C1 == 70),
			  (C2 == 108) or (C2 == 76), (C3 == 111) or (C3 == 79),
			  (C4 == 97) or (C4 == 65), (C5 == 116) or (C5 == 84) ->
		     {ok, [C1, C2, C3, C4, C5], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6, C7 | Tl])
		     when (C1 == 105) or (C1 == 73),
			  (C2 == 110) or (C2 == 78), (C3 == 116) or (C3 == 84),
			  (C4 == 101) or (C4 == 69), (C5 == 103) or (C5 == 71),
			  (C6 == 101) or (C6 == 69), (C7 == 114) or (C7 == 82) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6 | Tl])
		     when (C1 == 112) or (C1 == 80),
			  (C2 == 101) or (C2 == 69), (C3 == 114) or (C3 == 82),
			  (C4 == 105) or (C4 == 73), (C5 == 111) or (C5 == 79),
			  (C6 == 100) or (C6 == 68) ->
		     {ok, [C1, C2, C3, C4, C5, C6], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5 | Tl])
		     when (C1 == 114) or (C1 == 82),
			  (C2 == 101) or (C2 == 69), (C3 == 99) or (C3 == 67),
			  (C4 == 117) or (C4 == 85), (C5 == 114) or (C5 == 82) ->
		     {ok, [C1, C2, C3, C4, C5], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4 | Tl])
		     when (C1 == 116) or (C1 == 84),
			  (C2 == 101) or (C2 == 69), (C3 == 120) or (C3 == 88),
			  (C4 == 116) or (C4 == 84) ->
		     {ok, [C1, C2, C3, C4], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4 | Tl])
		     when (C1 == 116) or (C1 == 84),
			  (C2 == 105) or (C2 == 73), (C3 == 109) or (C3 == 77),
			  (C4 == 101) or (C4 == 69) ->
		     {ok, [C1, C2, C3, C4], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3 | Tl])
		     when (C1 == 117) or (C1 == 85),
			  (C2 == 114) or (C2 == 82), (C3 == 105) or (C3 == 73) ->
		     {ok, [C1, C2, C3], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9, C10 | Tl])
		     when (C1 == 117) or (C1 == 85),
			  (C2 == 116) or (C2 == 84), (C3 == 99) or (C3 == 67),
			  C4 == 45, (C5 == 111) or (C5 == 79),
			  (C6 == 102) or (C6 == 70), (C7 == 102) or (C7 == 70),
			  (C8 == 115) or (C8 == 83), (C9 == 101) or (C9 == 69),
			  (C10 == 116) or (C10 == 84) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10], Tl};
		 (_) -> fail
	     end,
	     'x-name'(), 'iana-token'()]).

binary() ->
    '__seq'(['__repeat'(0, infinity,
			'__repeat'(4, 4, 'b-char'())),
	     '__repeat'(0, 1, 'b-end'())]).

'b-end'() ->
    '__alt'(['__seq'(['__repeat'(2, 2, 'b-char'()),
		      fun ([C1, C2 | Tl]) when C1 == 61, C2 == 61 ->
			      {ok, [C1, C2], Tl};
			  (_) -> fail
		      end]),
	     '__seq'(['__repeat'(3, 3, 'b-char'()),
		      fun ([61 | Tl]) -> {ok, 61, Tl};
			  (_) -> fail
		      end])]).

'b-char'() ->
    '__alt'([fun ([C | Tl]) when C == 43 -> {ok, C, Tl};
		 ([C | Tl]) when C == 47 -> {ok, C, Tl};
		 (_) -> fail
	     end,
	     'ALPHA'(), 'DIGIT'()]).

boolean() ->
    '__alt'([fun ([C1, C2, C3, C4 | Tl])
		     when (C1 == 116) or (C1 == 84),
			  (C2 == 114) or (C2 == 82), (C3 == 117) or (C3 == 85),
			  (C4 == 101) or (C4 == 69) ->
		     {ok, [C1, C2, C3, C4], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5 | Tl])
		     when (C1 == 102) or (C1 == 70),
			  (C2 == 97) or (C2 == 65), (C3 == 108) or (C3 == 76),
			  (C4 == 115) or (C4 == 83), (C5 == 101) or (C5 == 69) ->
		     {ok, [C1, C2, C3, C4, C5], Tl};
		 (_) -> fail
	     end]).

'cal-address'() -> uri().

date() -> 'date-value'().

'date-value'() ->
    '__seq'(['date-fullyear'(), 'date-month'(),
	     'date-mday'()]).

'date-fullyear'() -> '__repeat'(4, 4, 'DIGIT'()).

'date-month'() -> '__repeat'(2, 2, 'DIGIT'()).

'date-mday'() -> '__repeat'(2, 2, 'DIGIT'()).

'date-time'() ->
    '__seq'([date(),
	     fun ([C | Tl]) when C == 116 -> {ok, C, Tl};
		 ([C | Tl]) when C == 84 -> {ok, C, Tl};
		 (_) -> fail
	     end,
	     time()]).

'dur-value'() ->
    '__seq'(['__alt'([fun ([C | Tl]) when C == 45 ->
			      {ok, C, Tl};
			  (_) -> fail
		      end,
		      '__repeat'(0, 1,
				 fun ([43 | Tl]) -> {ok, 43, Tl};
				     (_) -> fail
				 end)]),
	     fun ([C | Tl]) when C == 112 -> {ok, C, Tl};
		 ([C | Tl]) when C == 80 -> {ok, C, Tl};
		 (_) -> fail
	     end,
	     '__alt'(['dur-date'(), 'dur-time'(), 'dur-week'()])]).

'dur-date'() ->
    '__seq'(['dur-day'(), '__repeat'(0, 1, 'dur-time'())]).

'dur-time'() ->
    '__seq'([fun ([C | Tl]) when C == 116 -> {ok, C, Tl};
		 ([C | Tl]) when C == 84 -> {ok, C, Tl};
		 (_) -> fail
	     end,
	     '__alt'(['dur-hour'(), 'dur-minute'(),
		      'dur-second'()])]).

'dur-week'() ->
    '__seq'(['__repeat'(1, infinity, 'DIGIT'()),
	     fun ([C | Tl]) when C == 119 -> {ok, C, Tl};
		 ([C | Tl]) when C == 87 -> {ok, C, Tl};
		 (_) -> fail
	     end]).

'dur-hour'() ->
    '__seq'(['__repeat'(1, infinity, 'DIGIT'()),
	     fun ([C | Tl]) when C == 104 -> {ok, C, Tl};
		 ([C | Tl]) when C == 72 -> {ok, C, Tl};
		 (_) -> fail
	     end,
	     '__repeat'(0, 1, 'dur-minute'())]).

'dur-minute'() ->
    '__seq'(['__repeat'(1, infinity, 'DIGIT'()),
	     fun ([C | Tl]) when C == 109 -> {ok, C, Tl};
		 ([C | Tl]) when C == 77 -> {ok, C, Tl};
		 (_) -> fail
	     end,
	     '__repeat'(0, 1, 'dur-second'())]).

'dur-second'() ->
    '__seq'(['__repeat'(1, infinity, 'DIGIT'()),
	     fun ([C | Tl]) when C == 115 -> {ok, C, Tl};
		 ([C | Tl]) when C == 83 -> {ok, C, Tl};
		 (_) -> fail
	     end]).

'dur-day'() ->
    '__seq'(['__repeat'(1, infinity, 'DIGIT'()),
	     fun ([C | Tl]) when C == 100 -> {ok, C, Tl};
		 ([C | Tl]) when C == 68 -> {ok, C, Tl};
		 (_) -> fail
	     end]).

float() ->
    '__seq'(['__alt'([fun ([C | Tl]) when C == 45 ->
			      {ok, C, Tl};
			  (_) -> fail
		      end,
		      '__repeat'(0, 1,
				 fun ([43 | Tl]) -> {ok, 43, Tl};
				     (_) -> fail
				 end)]),
	     '__repeat'(1, infinity, 'DIGIT'()),
	     '__repeat'(0, 1,
			'__seq'([fun ([46 | Tl]) -> {ok, 46, Tl};
				     (_) -> fail
				 end,
				 '__repeat'(1, infinity, 'DIGIT'())]))]).

integer() ->
    '__seq'(['__alt'([fun ([C | Tl]) when C == 45 ->
			      {ok, C, Tl};
			  (_) -> fail
		      end,
		      '__repeat'(0, 1,
				 fun ([43 | Tl]) -> {ok, 43, Tl};
				     (_) -> fail
				 end)]),
	     '__repeat'(1, infinity, 'DIGIT'())]).

period() ->
    '__alt'(['period-explicit'(), 'period-start'()]).

'period-explicit'() ->
    '__seq'(['date-time'(),
	     fun ([47 | Tl]) -> {ok, 47, Tl};
		 (_) -> fail
	     end,
	     'date-time'()]).

'period-start'() ->
    '__seq'(['date-time'(),
	     fun ([47 | Tl]) -> {ok, 47, Tl};
		 (_) -> fail
	     end,
	     'dur-value'()]).

recur() ->
    '__seq'(['recur-rule-part'(),
	     '__repeat'(0, infinity,
			'__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 'recur-rule-part'()]))]).

'recur-rule-part'() ->
    '__alt'(['__seq'([fun ([C1, C2, C3, C4 | Tl])
			      when (C1 == 102) or (C1 == 70),
				   (C2 == 114) or (C2 == 82), (C3 == 101) or (C3 == 69),
				   (C4 == 113) or (C4 == 81) ->
			      {ok, [C1, C2, C3, C4], Tl};
			  (_) -> fail
		      end,
		      fun ([61 | Tl]) -> {ok, 61, Tl};
			  (_) -> fail
		      end,
		      freq()]),
	     '__seq'([fun ([C1, C2, C3, C4, C5 | Tl])
			      when (C1 == 117) or (C1 == 85),
				   (C2 == 110) or (C2 == 78), (C3 == 116) or (C3 == 84),
				   (C4 == 105) or (C4 == 73), (C5 == 108) or (C5 == 76) ->
			      {ok, [C1, C2, C3, C4, C5], Tl};
			  (_) -> fail
		      end,
		      fun ([61 | Tl]) -> {ok, 61, Tl};
			  (_) -> fail
		      end,
		      enddate()]),
	     '__seq'([fun ([C1, C2, C3, C4, C5 | Tl])
			      when (C1 == 99) or (C1 == 67),
				   (C2 == 111) or (C2 == 79), (C3 == 117) or (C3 == 85),
				   (C4 == 110) or (C4 == 78), (C5 == 116) or (C5 == 84) ->
			      {ok, [C1, C2, C3, C4, C5], Tl};
			  (_) -> fail
		      end,
		      fun ([61 | Tl]) -> {ok, 61, Tl};
			  (_) -> fail
		      end,
		      '__repeat'(1, infinity, 'DIGIT'())]),
	     '__seq'([fun ([C1, C2, C3, C4, C5, C6, C7, C8 | Tl])
			      when (C1 == 105) or (C1 == 73),
				   (C2 == 110) or (C2 == 78), (C3 == 116) or (C3 == 84),
				   (C4 == 101) or (C4 == 69), (C5 == 114) or (C5 == 82),
				   (C6 == 118) or (C6 == 86), (C7 == 97) or (C7 == 65),
				   (C8 == 108) or (C8 == 76) ->
			      {ok, [C1, C2, C3, C4, C5, C6, C7, C8], Tl};
			  (_) -> fail
		      end,
		      fun ([61 | Tl]) -> {ok, 61, Tl};
			  (_) -> fail
		      end,
		      '__repeat'(1, infinity, 'DIGIT'())]),
	     '__seq'([fun ([C1, C2, C3, C4, C5, C6, C7, C8 | Tl])
			      when (C1 == 98) or (C1 == 66),
				   (C2 == 121) or (C2 == 89), (C3 == 115) or (C3 == 83),
				   (C4 == 101) or (C4 == 69), (C5 == 99) or (C5 == 67),
				   (C6 == 111) or (C6 == 79), (C7 == 110) or (C7 == 78),
				   (C8 == 100) or (C8 == 68) ->
			      {ok, [C1, C2, C3, C4, C5, C6, C7, C8], Tl};
			  (_) -> fail
		      end,
		      fun ([61 | Tl]) -> {ok, 61, Tl};
			  (_) -> fail
		      end,
		      byseclist()]),
	     '__seq'([fun ([C1, C2, C3, C4, C5, C6, C7, C8 | Tl])
			      when (C1 == 98) or (C1 == 66),
				   (C2 == 121) or (C2 == 89), (C3 == 109) or (C3 == 77),
				   (C4 == 105) or (C4 == 73), (C5 == 110) or (C5 == 78),
				   (C6 == 117) or (C6 == 85), (C7 == 116) or (C7 == 84),
				   (C8 == 101) or (C8 == 69) ->
			      {ok, [C1, C2, C3, C4, C5, C6, C7, C8], Tl};
			  (_) -> fail
		      end,
		      fun ([61 | Tl]) -> {ok, 61, Tl};
			  (_) -> fail
		      end,
		      byminlist()]),
	     '__seq'([fun ([C1, C2, C3, C4, C5, C6 | Tl])
			      when (C1 == 98) or (C1 == 66),
				   (C2 == 121) or (C2 == 89), (C3 == 104) or (C3 == 72),
				   (C4 == 111) or (C4 == 79), (C5 == 117) or (C5 == 85),
				   (C6 == 114) or (C6 == 82) ->
			      {ok, [C1, C2, C3, C4, C5, C6], Tl};
			  (_) -> fail
		      end,
		      fun ([61 | Tl]) -> {ok, 61, Tl};
			  (_) -> fail
		      end,
		      byhrlist()]),
	     '__seq'([fun ([C1, C2, C3, C4, C5 | Tl])
			      when (C1 == 98) or (C1 == 66),
				   (C2 == 121) or (C2 == 89), (C3 == 100) or (C3 == 68),
				   (C4 == 97) or (C4 == 65), (C5 == 121) or (C5 == 89) ->
			      {ok, [C1, C2, C3, C4, C5], Tl};
			  (_) -> fail
		      end,
		      fun ([61 | Tl]) -> {ok, 61, Tl};
			  (_) -> fail
		      end,
		      bywdaylist()]),
	     '__seq'([fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9, C10
			    | Tl])
			      when (C1 == 98) or (C1 == 66),
				   (C2 == 121) or (C2 == 89), (C3 == 109) or (C3 == 77),
				   (C4 == 111) or (C4 == 79), (C5 == 110) or (C5 == 78),
				   (C6 == 116) or (C6 == 84), (C7 == 104) or (C7 == 72),
				   (C8 == 100) or (C8 == 68), (C9 == 97) or (C9 == 65),
				   (C10 == 121) or (C10 == 89) ->
			      {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10], Tl};
			  (_) -> fail
		      end,
		      fun ([61 | Tl]) -> {ok, 61, Tl};
			  (_) -> fail
		      end,
		      bymodaylist()]),
	     '__seq'([fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9 | Tl])
			      when (C1 == 98) or (C1 == 66),
				   (C2 == 121) or (C2 == 89), (C3 == 121) or (C3 == 89),
				   (C4 == 101) or (C4 == 69), (C5 == 97) or (C5 == 65),
				   (C6 == 114) or (C6 == 82), (C7 == 100) or (C7 == 68),
				   (C8 == 97) or (C8 == 65), (C9 == 121) or (C9 == 89) ->
			      {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9], Tl};
			  (_) -> fail
		      end,
		      fun ([61 | Tl]) -> {ok, 61, Tl};
			  (_) -> fail
		      end,
		      byyrdaylist()]),
	     '__seq'([fun ([C1, C2, C3, C4, C5, C6, C7, C8 | Tl])
			      when (C1 == 98) or (C1 == 66),
				   (C2 == 121) or (C2 == 89), (C3 == 119) or (C3 == 87),
				   (C4 == 101) or (C4 == 69), (C5 == 101) or (C5 == 69),
				   (C6 == 107) or (C6 == 75), (C7 == 110) or (C7 == 78),
				   (C8 == 111) or (C8 == 79) ->
			      {ok, [C1, C2, C3, C4, C5, C6, C7, C8], Tl};
			  (_) -> fail
		      end,
		      fun ([61 | Tl]) -> {ok, 61, Tl};
			  (_) -> fail
		      end,
		      bywknolist()]),
	     '__seq'([fun ([C1, C2, C3, C4, C5, C6, C7 | Tl])
			      when (C1 == 98) or (C1 == 66),
				   (C2 == 121) or (C2 == 89), (C3 == 109) or (C3 == 77),
				   (C4 == 111) or (C4 == 79), (C5 == 110) or (C5 == 78),
				   (C6 == 116) or (C6 == 84), (C7 == 104) or (C7 == 72) ->
			      {ok, [C1, C2, C3, C4, C5, C6, C7], Tl};
			  (_) -> fail
		      end,
		      fun ([61 | Tl]) -> {ok, 61, Tl};
			  (_) -> fail
		      end,
		      bymolist()]),
	     '__seq'([fun ([C1, C2, C3, C4, C5, C6, C7, C8 | Tl])
			      when (C1 == 98) or (C1 == 66),
				   (C2 == 121) or (C2 == 89), (C3 == 115) or (C3 == 83),
				   (C4 == 101) or (C4 == 69), (C5 == 116) or (C5 == 84),
				   (C6 == 112) or (C6 == 80), (C7 == 111) or (C7 == 79),
				   (C8 == 115) or (C8 == 83) ->
			      {ok, [C1, C2, C3, C4, C5, C6, C7, C8], Tl};
			  (_) -> fail
		      end,
		      fun ([61 | Tl]) -> {ok, 61, Tl};
			  (_) -> fail
		      end,
		      bysplist()]),
	     '__seq'([fun ([C1, C2, C3, C4 | Tl])
			      when (C1 == 119) or (C1 == 87),
				   (C2 == 107) or (C2 == 75), (C3 == 115) or (C3 == 83),
				   (C4 == 116) or (C4 == 84) ->
			      {ok, [C1, C2, C3, C4], Tl};
			  (_) -> fail
		      end,
		      fun ([61 | Tl]) -> {ok, 61, Tl};
			  (_) -> fail
		      end,
		      weekday()])]).

freq() ->
    '__alt'([fun ([C1, C2, C3, C4, C5, C6, C7, C8 | Tl])
		     when (C1 == 115) or (C1 == 83),
			  (C2 == 101) or (C2 == 69), (C3 == 99) or (C3 == 67),
			  (C4 == 111) or (C4 == 79), (C5 == 110) or (C5 == 78),
			  (C6 == 100) or (C6 == 68), (C7 == 108) or (C7 == 76),
			  (C8 == 121) or (C8 == 89) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6, C7, C8 | Tl])
		     when (C1 == 109) or (C1 == 77),
			  (C2 == 105) or (C2 == 73), (C3 == 110) or (C3 == 78),
			  (C4 == 117) or (C4 == 85), (C5 == 116) or (C5 == 84),
			  (C6 == 101) or (C6 == 69), (C7 == 108) or (C7 == 76),
			  (C8 == 121) or (C8 == 89) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6 | Tl])
		     when (C1 == 104) or (C1 == 72),
			  (C2 == 111) or (C2 == 79), (C3 == 117) or (C3 == 85),
			  (C4 == 114) or (C4 == 82), (C5 == 108) or (C5 == 76),
			  (C6 == 121) or (C6 == 89) ->
		     {ok, [C1, C2, C3, C4, C5, C6], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5 | Tl])
		     when (C1 == 100) or (C1 == 68),
			  (C2 == 97) or (C2 == 65), (C3 == 105) or (C3 == 73),
			  (C4 == 108) or (C4 == 76), (C5 == 121) or (C5 == 89) ->
		     {ok, [C1, C2, C3, C4, C5], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6 | Tl])
		     when (C1 == 119) or (C1 == 87),
			  (C2 == 101) or (C2 == 69), (C3 == 101) or (C3 == 69),
			  (C4 == 107) or (C4 == 75), (C5 == 108) or (C5 == 76),
			  (C6 == 121) or (C6 == 89) ->
		     {ok, [C1, C2, C3, C4, C5, C6], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6, C7 | Tl])
		     when (C1 == 109) or (C1 == 77),
			  (C2 == 111) or (C2 == 79), (C3 == 110) or (C3 == 78),
			  (C4 == 116) or (C4 == 84), (C5 == 104) or (C5 == 72),
			  (C6 == 108) or (C6 == 76), (C7 == 121) or (C7 == 89) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6 | Tl])
		     when (C1 == 121) or (C1 == 89),
			  (C2 == 101) or (C2 == 69), (C3 == 97) or (C3 == 65),
			  (C4 == 114) or (C4 == 82), (C5 == 108) or (C5 == 76),
			  (C6 == 121) or (C6 == 89) ->
		     {ok, [C1, C2, C3, C4, C5, C6], Tl};
		 (_) -> fail
	     end]).

enddate() -> '__alt'([date(), 'date-time'()]).

byseclist() ->
    '__seq'([seconds(),
	     '__repeat'(0, infinity,
			'__seq'([fun ([44 | Tl]) -> {ok, 44, Tl};
				     (_) -> fail
				 end,
				 seconds()]))]).

seconds() -> '__repeat'(1, 2, 'DIGIT'()).

byminlist() ->
    '__seq'([minutes(),
	     '__repeat'(0, infinity,
			'__seq'([fun ([44 | Tl]) -> {ok, 44, Tl};
				     (_) -> fail
				 end,
				 minutes()]))]).

minutes() -> '__repeat'(1, 2, 'DIGIT'()).

byhrlist() ->
    '__seq'([hour(),
	     '__repeat'(0, infinity,
			'__seq'([fun ([44 | Tl]) -> {ok, 44, Tl};
				     (_) -> fail
				 end,
				 hour()]))]).

hour() -> '__repeat'(1, 2, 'DIGIT'()).

bywdaylist() ->
    '__seq'([weekdaynum(),
	     '__repeat'(0, infinity,
			'__seq'([fun ([44 | Tl]) -> {ok, 44, Tl};
				     (_) -> fail
				 end,
				 weekdaynum()]))]).

weekdaynum() ->
    '__seq'(['__repeat'(0, 1,
			'__seq'(['__repeat'(0, 1, '__alt'([plus(), minus()])),
				 ordwk()])),
	     weekday()]).

plus() ->
    fun ([43 | Tl]) -> {ok, 43, Tl};
	(_) -> fail
    end.

minus() ->
    fun ([45 | Tl]) -> {ok, 45, Tl};
	(_) -> fail
    end.

ordwk() -> '__repeat'(1, 2, 'DIGIT'()).

weekday() ->
    '__alt'([fun ([C1, C2 | Tl])
		     when (C1 == 115) or (C1 == 83),
			  (C2 == 117) or (C2 == 85) ->
		     {ok, [C1, C2], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2 | Tl])
		     when (C1 == 109) or (C1 == 77),
			  (C2 == 111) or (C2 == 79) ->
		     {ok, [C1, C2], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2 | Tl])
		     when (C1 == 116) or (C1 == 84),
			  (C2 == 117) or (C2 == 85) ->
		     {ok, [C1, C2], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2 | Tl])
		     when (C1 == 119) or (C1 == 87),
			  (C2 == 101) or (C2 == 69) ->
		     {ok, [C1, C2], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2 | Tl])
		     when (C1 == 116) or (C1 == 84),
			  (C2 == 104) or (C2 == 72) ->
		     {ok, [C1, C2], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2 | Tl])
		     when (C1 == 102) or (C1 == 70),
			  (C2 == 114) or (C2 == 82) ->
		     {ok, [C1, C2], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2 | Tl])
		     when (C1 == 115) or (C1 == 83),
			  (C2 == 97) or (C2 == 65) ->
		     {ok, [C1, C2], Tl};
		 (_) -> fail
	     end]).

bymodaylist() ->
    '__seq'([monthdaynum(),
	     '__repeat'(0, infinity,
			'__seq'([fun ([44 | Tl]) -> {ok, 44, Tl};
				     (_) -> fail
				 end,
				 monthdaynum()]))]).

monthdaynum() ->
    '__seq'(['__repeat'(0, 1, '__alt'([plus(), minus()])),
	     ordmoday()]).

ordmoday() -> '__repeat'(1, 2, 'DIGIT'()).

byyrdaylist() ->
    '__seq'([yeardaynum(),
	     '__repeat'(0, infinity,
			'__seq'([fun ([44 | Tl]) -> {ok, 44, Tl};
				     (_) -> fail
				 end,
				 yeardaynum()]))]).

yeardaynum() ->
    '__seq'(['__repeat'(0, 1, '__alt'([plus(), minus()])),
	     ordyrday()]).

ordyrday() -> '__repeat'(1, 3, 'DIGIT'()).

bywknolist() ->
    '__seq'([weeknum(),
	     '__repeat'(0, infinity,
			'__seq'([fun ([44 | Tl]) -> {ok, 44, Tl};
				     (_) -> fail
				 end,
				 weeknum()]))]).

weeknum() ->
    '__seq'(['__repeat'(0, 1, '__alt'([plus(), minus()])),
	     ordwk()]).

bymolist() ->
    '__seq'([monthnum(),
	     '__repeat'(0, infinity,
			'__seq'([fun ([44 | Tl]) -> {ok, 44, Tl};
				     (_) -> fail
				 end,
				 monthnum()]))]).

monthnum() -> '__repeat'(1, 2, 'DIGIT'()).

bysplist() ->
    '__seq'([setposday(),
	     '__repeat'(0, infinity,
			'__seq'([fun ([44 | Tl]) -> {ok, 44, Tl};
				     (_) -> fail
				 end,
				 setposday()]))]).

setposday() -> yeardaynum().

text() ->
    '__repeat'(0, infinity,
	       '__alt'([fun ([C | Tl]) when C == 58 -> {ok, C, Tl};
			    (_) -> fail
			end,
			'TSAFE-CHAR'(), 'DQUOTE'(), 'ESCAPED-CHAR'()])).

'ESCAPED-CHAR'() ->
    '__alt'([fun ([C1, C2 | Tl]) when C1 == 92, C2 == 92 ->
		     {ok, [C1, C2], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2 | Tl]) when C1 == 92, C2 == 59 ->
		     {ok, [C1, C2], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2 | Tl]) when C1 == 92, C2 == 44 ->
		     {ok, [C1, C2], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2 | Tl])
		     when C1 == 92, (C2 == 110) or (C2 == 78) ->
		     {ok, [C1, C2], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2 | Tl])
		     when C1 == 92, (C2 == 110) or (C2 == 78) ->
		     {ok, [C1, C2], Tl};
		 (_) -> fail
	     end]).

'TSAFE-CHAR'() ->
    '__alt'([fun ([C | Tl]) when (C >= 93) and (C =< 126) ->
		     {ok, C, Tl};
		 ([C | Tl]) when (C >= 60) and (C =< 91) -> {ok, C, Tl};
		 ([C | Tl]) when (C >= 45) and (C =< 57) -> {ok, C, Tl};
		 ([C | Tl]) when (C >= 35) and (C =< 43) -> {ok, C, Tl};
		 ([C | Tl]) when C == 33 -> {ok, C, Tl};
		 (_) -> fail
	     end,
	     'WSP'(), 'NON-US-ASCII'()]).

time() ->
    '__seq'(['time-hour'(), 'time-minute'(),
	     'time-second'(), '__repeat'(0, 1, 'time-utc'())]).

'time-hour'() -> '__repeat'(2, 2, 'DIGIT'()).

'time-minute'() -> '__repeat'(2, 2, 'DIGIT'()).

'time-second'() -> '__repeat'(2, 2, 'DIGIT'()).

'time-utc'() ->
    fun ([C | Tl]) when C == 122 -> {ok, C, Tl};
	([C | Tl]) when C == 90 -> {ok, C, Tl};
	(_) -> fail
    end.

'utc-offset'() -> 'time-numzone'().

'time-numzone'() ->
    '__seq'([fun ([C | Tl]) when C == 43 -> {ok, C, Tl};
		 ([C | Tl]) when C == 45 -> {ok, C, Tl};
		 (_) -> fail
	     end,
	     'time-hour'(), 'time-minute'(),
	     '__repeat'(0, 1, 'time-second'())]).

icalstream() -> '__repeat'(1, infinity, icalobject()).

icalobject() ->
    '__seq'([fun ([C1, C2, C3, C4, C5 | Tl])
		     when (C1 == 98) or (C1 == 66),
			  (C2 == 101) or (C2 == 69), (C3 == 103) or (C3 == 71),
			  (C4 == 105) or (C4 == 73), (C5 == 110) or (C5 == 78) ->
		     {ok, [C1, C2, C3, C4, C5], Tl};
		 (_) -> fail
	     end,
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9 | Tl])
		     when (C1 == 118) or (C1 == 86),
			  (C2 == 99) or (C2 == 67), (C3 == 97) or (C3 == 65),
			  (C4 == 108) or (C4 == 76), (C5 == 101) or (C5 == 69),
			  (C6 == 110) or (C6 == 78), (C7 == 100) or (C7 == 68),
			  (C8 == 97) or (C8 == 65), (C9 == 114) or (C9 == 82) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9], Tl};
		 (_) -> fail
	     end,
	     'CRLF'(), icalbody(),
	     fun ([C1, C2, C3 | Tl])
		     when (C1 == 101) or (C1 == 69),
			  (C2 == 110) or (C2 == 78), (C3 == 100) or (C3 == 68) ->
		     {ok, [C1, C2, C3], Tl};
		 (_) -> fail
	     end,
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9 | Tl])
		     when (C1 == 118) or (C1 == 86),
			  (C2 == 99) or (C2 == 67), (C3 == 97) or (C3 == 65),
			  (C4 == 108) or (C4 == 76), (C5 == 101) or (C5 == 69),
			  (C6 == 110) or (C6 == 78), (C7 == 100) or (C7 == 68),
			  (C8 == 97) or (C8 == 65), (C9 == 114) or (C9 == 82) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9], Tl};
		 (_) -> fail
	     end,
	     'CRLF'()]).

icalbody() -> '__seq'([calprops(), component()]).

calprops() ->
    '__repeat'(0, infinity,
	       '__alt'([prodid(), version(), calscale(), method(),
			'x-prop'(), 'iana-prop'()])).

'iana-comp'() ->
    '__seq'([fun ([C1, C2, C3, C4, C5 | Tl])
		     when (C1 == 98) or (C1 == 66),
			  (C2 == 101) or (C2 == 69), (C3 == 103) or (C3 == 71),
			  (C4 == 105) or (C4 == 73), (C5 == 110) or (C5 == 78) ->
		     {ok, [C1, C2, C3, C4, C5], Tl};
		 (_) -> fail
	     end,
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     'iana-token'(), 'CRLF'(),
	     '__repeat'(1, infinity, contentline()),
	     fun ([C1, C2, C3 | Tl])
		     when (C1 == 101) or (C1 == 69),
			  (C2 == 110) or (C2 == 78), (C3 == 100) or (C3 == 68) ->
		     {ok, [C1, C2, C3], Tl};
		 (_) -> fail
	     end,
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     'iana-token'(), 'CRLF'()]).

'x-comp'() ->
    '__seq'([fun ([C1, C2, C3, C4, C5 | Tl])
		     when (C1 == 98) or (C1 == 66),
			  (C2 == 101) or (C2 == 69), (C3 == 103) or (C3 == 71),
			  (C4 == 105) or (C4 == 73), (C5 == 110) or (C5 == 78) ->
		     {ok, [C1, C2, C3, C4, C5], Tl};
		 (_) -> fail
	     end,
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     'x-name'(), 'CRLF'(),
	     '__repeat'(1, infinity, contentline()),
	     fun ([C1, C2, C3 | Tl])
		     when (C1 == 101) or (C1 == 69),
			  (C2 == 110) or (C2 == 78), (C3 == 100) or (C3 == 68) ->
		     {ok, [C1, C2, C3], Tl};
		 (_) -> fail
	     end,
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     'x-name'(), 'CRLF'()]).

eventc() ->
    '__seq'([fun ([C1, C2, C3, C4, C5 | Tl])
		     when (C1 == 98) or (C1 == 66),
			  (C2 == 101) or (C2 == 69), (C3 == 103) or (C3 == 71),
			  (C4 == 105) or (C4 == 73), (C5 == 110) or (C5 == 78) ->
		     {ok, [C1, C2, C3, C4, C5], Tl};
		 (_) -> fail
	     end,
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6 | Tl])
		     when (C1 == 118) or (C1 == 86),
			  (C2 == 101) or (C2 == 69), (C3 == 118) or (C3 == 86),
			  (C4 == 101) or (C4 == 69), (C5 == 110) or (C5 == 78),
			  (C6 == 116) or (C6 == 84) ->
		     {ok, [C1, C2, C3, C4, C5, C6], Tl};
		 (_) -> fail
	     end,
	     'CRLF'(), eventprop(),
	     '__repeat'(0, infinity, alarmc()),
	     fun ([C1, C2, C3 | Tl])
		     when (C1 == 101) or (C1 == 69),
			  (C2 == 110) or (C2 == 78), (C3 == 100) or (C3 == 68) ->
		     {ok, [C1, C2, C3], Tl};
		 (_) -> fail
	     end,
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6 | Tl])
		     when (C1 == 118) or (C1 == 86),
			  (C2 == 101) or (C2 == 69), (C3 == 118) or (C3 == 86),
			  (C4 == 101) or (C4 == 69), (C5 == 110) or (C5 == 78),
			  (C6 == 116) or (C6 == 84) ->
		     {ok, [C1, C2, C3, C4, C5, C6], Tl};
		 (_) -> fail
	     end,
	     'CRLF'()]).

eventprop() ->
    '__repeat'(0, infinity,
	       '__alt'([dtstamp(), uid(), dtstart(), class(),
			created(), description(), geo(), 'last-mod'(),
			location(), organizer(), priority(), seq(), status(),
			summary(), transp(), url(), recurid(), rrule(), dtend(),
			duration(), attach(), attendee(), categories(),
			comment(), contact(), exdate(), rstatus(), related(),
			resources(), rdate(), 'x-prop'(), 'iana-prop'()])).

todoc() ->
    '__seq'([fun ([C1, C2, C3, C4, C5 | Tl])
		     when (C1 == 98) or (C1 == 66),
			  (C2 == 101) or (C2 == 69), (C3 == 103) or (C3 == 71),
			  (C4 == 105) or (C4 == 73), (C5 == 110) or (C5 == 78) ->
		     {ok, [C1, C2, C3, C4, C5], Tl};
		 (_) -> fail
	     end,
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5 | Tl])
		     when (C1 == 118) or (C1 == 86),
			  (C2 == 116) or (C2 == 84), (C3 == 111) or (C3 == 79),
			  (C4 == 100) or (C4 == 68), (C5 == 111) or (C5 == 79) ->
		     {ok, [C1, C2, C3, C4, C5], Tl};
		 (_) -> fail
	     end,
	     'CRLF'(), todoprop(), '__repeat'(0, infinity, alarmc()),
	     fun ([C1, C2, C3 | Tl])
		     when (C1 == 101) or (C1 == 69),
			  (C2 == 110) or (C2 == 78), (C3 == 100) or (C3 == 68) ->
		     {ok, [C1, C2, C3], Tl};
		 (_) -> fail
	     end,
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5 | Tl])
		     when (C1 == 118) or (C1 == 86),
			  (C2 == 116) or (C2 == 84), (C3 == 111) or (C3 == 79),
			  (C4 == 100) or (C4 == 68), (C5 == 111) or (C5 == 79) ->
		     {ok, [C1, C2, C3, C4, C5], Tl};
		 (_) -> fail
	     end,
	     'CRLF'()]).

todoprop() ->
    '__repeat'(0, infinity,
	       '__alt'([dtstamp(), uid(), class(), completed(),
			created(), description(), dtstart(), geo(),
			'last-mod'(), location(), organizer(), percent(),
			priority(), recurid(), seq(), status(), summary(),
			url(), rrule(), due(), duration(), attach(), attendee(),
			categories(), comment(), contact(), exdate(), rstatus(),
			related(), resources(), rdate(), 'x-prop'(),
			'iana-prop'()])).

journalc() ->
    '__seq'([fun ([C1, C2, C3, C4, C5 | Tl])
		     when (C1 == 98) or (C1 == 66),
			  (C2 == 101) or (C2 == 69), (C3 == 103) or (C3 == 71),
			  (C4 == 105) or (C4 == 73), (C5 == 110) or (C5 == 78) ->
		     {ok, [C1, C2, C3, C4, C5], Tl};
		 (_) -> fail
	     end,
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6, C7, C8 | Tl])
		     when (C1 == 118) or (C1 == 86),
			  (C2 == 106) or (C2 == 74), (C3 == 111) or (C3 == 79),
			  (C4 == 117) or (C4 == 85), (C5 == 114) or (C5 == 82),
			  (C6 == 110) or (C6 == 78), (C7 == 97) or (C7 == 65),
			  (C8 == 108) or (C8 == 76) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8], Tl};
		 (_) -> fail
	     end,
	     'CRLF'(), jourprop(),
	     fun ([C1, C2, C3 | Tl])
		     when (C1 == 101) or (C1 == 69),
			  (C2 == 110) or (C2 == 78), (C3 == 100) or (C3 == 68) ->
		     {ok, [C1, C2, C3], Tl};
		 (_) -> fail
	     end,
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6, C7, C8 | Tl])
		     when (C1 == 118) or (C1 == 86),
			  (C2 == 106) or (C2 == 74), (C3 == 111) or (C3 == 79),
			  (C4 == 117) or (C4 == 85), (C5 == 114) or (C5 == 82),
			  (C6 == 110) or (C6 == 78), (C7 == 97) or (C7 == 65),
			  (C8 == 108) or (C8 == 76) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8], Tl};
		 (_) -> fail
	     end,
	     'CRLF'()]).

jourprop() ->
    '__repeat'(0, infinity,
	       '__alt'([dtstamp(), uid(), class(), created(),
			dtstart(), 'last-mod'(), organizer(), recurid(), seq(),
			status(), summary(), url(), rrule(), attach(),
			attendee(), categories(), comment(), contact(),
			description(), exdate(), related(), rdate(), rstatus(),
			'x-prop'(), 'iana-prop'()])).

freebusyc() ->
    '__seq'([fun ([C1, C2, C3, C4, C5 | Tl])
		     when (C1 == 98) or (C1 == 66),
			  (C2 == 101) or (C2 == 69), (C3 == 103) or (C3 == 71),
			  (C4 == 105) or (C4 == 73), (C5 == 110) or (C5 == 78) ->
		     {ok, [C1, C2, C3, C4, C5], Tl};
		 (_) -> fail
	     end,
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9 | Tl])
		     when (C1 == 118) or (C1 == 86),
			  (C2 == 102) or (C2 == 70), (C3 == 114) or (C3 == 82),
			  (C4 == 101) or (C4 == 69), (C5 == 101) or (C5 == 69),
			  (C6 == 98) or (C6 == 66), (C7 == 117) or (C7 == 85),
			  (C8 == 115) or (C8 == 83), (C9 == 121) or (C9 == 89) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9], Tl};
		 (_) -> fail
	     end,
	     'CRLF'(), fbprop(),
	     fun ([C1, C2, C3 | Tl])
		     when (C1 == 101) or (C1 == 69),
			  (C2 == 110) or (C2 == 78), (C3 == 100) or (C3 == 68) ->
		     {ok, [C1, C2, C3], Tl};
		 (_) -> fail
	     end,
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9 | Tl])
		     when (C1 == 118) or (C1 == 86),
			  (C2 == 102) or (C2 == 70), (C3 == 114) or (C3 == 82),
			  (C4 == 101) or (C4 == 69), (C5 == 101) or (C5 == 69),
			  (C6 == 98) or (C6 == 66), (C7 == 117) or (C7 == 85),
			  (C8 == 115) or (C8 == 83), (C9 == 121) or (C9 == 89) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9], Tl};
		 (_) -> fail
	     end,
	     'CRLF'()]).

fbprop() ->
    '__repeat'(0, infinity,
	       '__alt'([dtstamp(), uid(), contact(), dtstart(),
			dtend(), organizer(), url(), attendee(), comment(),
			freebusy(), rstatus(), 'x-prop'(), 'iana-prop'()])).

timezonec() ->
    '__seq'([fun ([C1, C2, C3, C4, C5 | Tl])
		     when (C1 == 98) or (C1 == 66),
			  (C2 == 101) or (C2 == 69), (C3 == 103) or (C3 == 71),
			  (C4 == 105) or (C4 == 73), (C5 == 110) or (C5 == 78) ->
		     {ok, [C1, C2, C3, C4, C5], Tl};
		 (_) -> fail
	     end,
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9 | Tl])
		     when (C1 == 118) or (C1 == 86),
			  (C2 == 116) or (C2 == 84), (C3 == 105) or (C3 == 73),
			  (C4 == 109) or (C4 == 77), (C5 == 101) or (C5 == 69),
			  (C6 == 122) or (C6 == 90), (C7 == 111) or (C7 == 79),
			  (C8 == 110) or (C8 == 78), (C9 == 101) or (C9 == 69) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9], Tl};
		 (_) -> fail
	     end,
	     'CRLF'(),
	     '__repeat'(0, infinity,
			'__alt'([tzid(), 'last-mod'(), tzurl(), standardc(),
				 daylightc(), 'x-prop'(), 'iana-prop'()])),
	     fun ([C1, C2, C3 | Tl])
		     when (C1 == 101) or (C1 == 69),
			  (C2 == 110) or (C2 == 78), (C3 == 100) or (C3 == 68) ->
		     {ok, [C1, C2, C3], Tl};
		 (_) -> fail
	     end,
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9 | Tl])
		     when (C1 == 118) or (C1 == 86),
			  (C2 == 116) or (C2 == 84), (C3 == 105) or (C3 == 73),
			  (C4 == 109) or (C4 == 77), (C5 == 101) or (C5 == 69),
			  (C6 == 122) or (C6 == 90), (C7 == 111) or (C7 == 79),
			  (C8 == 110) or (C8 == 78), (C9 == 101) or (C9 == 69) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9], Tl};
		 (_) -> fail
	     end,
	     'CRLF'()]).

standardc() ->
    '__seq'([fun ([C1, C2, C3, C4, C5 | Tl])
		     when (C1 == 98) or (C1 == 66),
			  (C2 == 101) or (C2 == 69), (C3 == 103) or (C3 == 71),
			  (C4 == 105) or (C4 == 73), (C5 == 110) or (C5 == 78) ->
		     {ok, [C1, C2, C3, C4, C5], Tl};
		 (_) -> fail
	     end,
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6, C7, C8 | Tl])
		     when (C1 == 115) or (C1 == 83),
			  (C2 == 116) or (C2 == 84), (C3 == 97) or (C3 == 65),
			  (C4 == 110) or (C4 == 78), (C5 == 100) or (C5 == 68),
			  (C6 == 97) or (C6 == 65), (C7 == 114) or (C7 == 82),
			  (C8 == 100) or (C8 == 68) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8], Tl};
		 (_) -> fail
	     end,
	     'CRLF'(), tzprop(),
	     fun ([C1, C2, C3 | Tl])
		     when (C1 == 101) or (C1 == 69),
			  (C2 == 110) or (C2 == 78), (C3 == 100) or (C3 == 68) ->
		     {ok, [C1, C2, C3], Tl};
		 (_) -> fail
	     end,
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6, C7, C8 | Tl])
		     when (C1 == 115) or (C1 == 83),
			  (C2 == 116) or (C2 == 84), (C3 == 97) or (C3 == 65),
			  (C4 == 110) or (C4 == 78), (C5 == 100) or (C5 == 68),
			  (C6 == 97) or (C6 == 65), (C7 == 114) or (C7 == 82),
			  (C8 == 100) or (C8 == 68) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8], Tl};
		 (_) -> fail
	     end,
	     'CRLF'()]).

daylightc() ->
    '__seq'([fun ([C1, C2, C3, C4, C5 | Tl])
		     when (C1 == 98) or (C1 == 66),
			  (C2 == 101) or (C2 == 69), (C3 == 103) or (C3 == 71),
			  (C4 == 105) or (C4 == 73), (C5 == 110) or (C5 == 78) ->
		     {ok, [C1, C2, C3, C4, C5], Tl};
		 (_) -> fail
	     end,
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6, C7, C8 | Tl])
		     when (C1 == 100) or (C1 == 68),
			  (C2 == 97) or (C2 == 65), (C3 == 121) or (C3 == 89),
			  (C4 == 108) or (C4 == 76), (C5 == 105) or (C5 == 73),
			  (C6 == 103) or (C6 == 71), (C7 == 104) or (C7 == 72),
			  (C8 == 116) or (C8 == 84) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8], Tl};
		 (_) -> fail
	     end,
	     'CRLF'(), tzprop(),
	     fun ([C1, C2, C3 | Tl])
		     when (C1 == 101) or (C1 == 69),
			  (C2 == 110) or (C2 == 78), (C3 == 100) or (C3 == 68) ->
		     {ok, [C1, C2, C3], Tl};
		 (_) -> fail
	     end,
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6, C7, C8 | Tl])
		     when (C1 == 100) or (C1 == 68),
			  (C2 == 97) or (C2 == 65), (C3 == 121) or (C3 == 89),
			  (C4 == 108) or (C4 == 76), (C5 == 105) or (C5 == 73),
			  (C6 == 103) or (C6 == 71), (C7 == 104) or (C7 == 72),
			  (C8 == 116) or (C8 == 84) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8], Tl};
		 (_) -> fail
	     end,
	     'CRLF'()]).

tzprop() ->
    '__repeat'(0, infinity,
	       '__alt'([dtstart(), tzoffsetto(), tzoffsetfrom(),
			rrule(), comment(), rdate(), tzname(), 'x-prop'(),
			'iana-prop'()])).

alarmc() ->
    '__seq'([fun ([C1, C2, C3, C4, C5 | Tl])
		     when (C1 == 98) or (C1 == 66),
			  (C2 == 101) or (C2 == 69), (C3 == 103) or (C3 == 71),
			  (C4 == 105) or (C4 == 73), (C5 == 110) or (C5 == 78) ->
		     {ok, [C1, C2, C3, C4, C5], Tl};
		 (_) -> fail
	     end,
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6 | Tl])
		     when (C1 == 118) or (C1 == 86),
			  (C2 == 97) or (C2 == 65), (C3 == 108) or (C3 == 76),
			  (C4 == 97) or (C4 == 65), (C5 == 114) or (C5 == 82),
			  (C6 == 109) or (C6 == 77) ->
		     {ok, [C1, C2, C3, C4, C5, C6], Tl};
		 (_) -> fail
	     end,
	     'CRLF'(),
	     '__alt'([audioprop(), dispprop(), emailprop()]),
	     fun ([C1, C2, C3 | Tl])
		     when (C1 == 101) or (C1 == 69),
			  (C2 == 110) or (C2 == 78), (C3 == 100) or (C3 == 68) ->
		     {ok, [C1, C2, C3], Tl};
		 (_) -> fail
	     end,
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6 | Tl])
		     when (C1 == 118) or (C1 == 86),
			  (C2 == 97) or (C2 == 65), (C3 == 108) or (C3 == 76),
			  (C4 == 97) or (C4 == 65), (C5 == 114) or (C5 == 82),
			  (C6 == 109) or (C6 == 77) ->
		     {ok, [C1, C2, C3, C4, C5, C6], Tl};
		 (_) -> fail
	     end,
	     'CRLF'()]).

audioprop() ->
    '__repeat'(0, infinity,
	       '__alt'([action(), trigger(), duration(), repeat(),
			attach(), 'x-prop'(), 'iana-prop'()])).

dispprop() ->
    '__repeat'(0, infinity,
	       '__alt'([action(), description(), trigger(), duration(),
			repeat(), 'x-prop'(), 'iana-prop'()])).

emailprop() ->
    '__repeat'(0, infinity,
	       '__alt'([action(), description(), trigger(), summary(),
			attendee(), duration(), repeat(), attach(), 'x-prop'(),
			'iana-prop'()])).

calscale() ->
    '__seq'([fun ([C1, C2, C3, C4, C5, C6, C7, C8 | Tl])
		     when (C1 == 99) or (C1 == 67), (C2 == 97) or (C2 == 65),
			  (C3 == 108) or (C3 == 76), (C4 == 115) or (C4 == 83),
			  (C5 == 99) or (C5 == 67), (C6 == 97) or (C6 == 65),
			  (C7 == 108) or (C7 == 76), (C8 == 101) or (C8 == 69) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8], Tl};
		 (_) -> fail
	     end,
	     calparam(),
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     calvalue(), 'CRLF'()]).

calparam() ->
    '__repeat'(0, infinity,
	       '__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
			    (_) -> fail
			end,
			'other-param'()])).

calvalue() ->
    fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9 | Tl])
	    when (C1 == 103) or (C1 == 71),
		 (C2 == 114) or (C2 == 82), (C3 == 101) or (C3 == 69),
		 (C4 == 103) or (C4 == 71), (C5 == 111) or (C5 == 79),
		 (C6 == 114) or (C6 == 82), (C7 == 105) or (C7 == 73),
		 (C8 == 97) or (C8 == 65), (C9 == 110) or (C9 == 78) ->
	    {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9], Tl};
	(_) -> fail
    end.

method() ->
    '__seq'([fun ([C1, C2, C3, C4, C5, C6 | Tl])
		     when (C1 == 109) or (C1 == 77),
			  (C2 == 101) or (C2 == 69), (C3 == 116) or (C3 == 84),
			  (C4 == 104) or (C4 == 72), (C5 == 111) or (C5 == 79),
			  (C6 == 100) or (C6 == 68) ->
		     {ok, [C1, C2, C3, C4, C5, C6], Tl};
		 (_) -> fail
	     end,
	     metparam(),
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     metvalue(), 'CRLF'()]).

metparam() ->
    '__repeat'(0, infinity,
	       '__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
			    (_) -> fail
			end,
			'other-param'()])).

metvalue() -> 'iana-token'().

prodid() ->
    '__seq'([fun ([C1, C2, C3, C4, C5, C6 | Tl])
		     when (C1 == 112) or (C1 == 80),
			  (C2 == 114) or (C2 == 82), (C3 == 111) or (C3 == 79),
			  (C4 == 100) or (C4 == 68), (C5 == 105) or (C5 == 73),
			  (C6 == 100) or (C6 == 68) ->
		     {ok, [C1, C2, C3, C4, C5, C6], Tl};
		 (_) -> fail
	     end,
	     pidparam(),
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     pidvalue(), 'CRLF'()]).

pidparam() ->
    '__repeat'(0, infinity,
	       '__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
			    (_) -> fail
			end,
			'other-param'()])).

pidvalue() -> text().

version() ->
    '__seq'([fun ([C1, C2, C3, C4, C5, C6, C7 | Tl])
		     when (C1 == 118) or (C1 == 86),
			  (C2 == 101) or (C2 == 69), (C3 == 114) or (C3 == 82),
			  (C4 == 115) or (C4 == 83), (C5 == 105) or (C5 == 73),
			  (C6 == 111) or (C6 == 79), (C7 == 110) or (C7 == 78) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7], Tl};
		 (_) -> fail
	     end,
	     verparam(),
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     vervalue(), 'CRLF'()]).

verparam() ->
    '__repeat'(0, infinity,
	       '__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
			    (_) -> fail
			end,
			'other-param'()])).

vervalue() ->
    '__alt'([fun ([C1, C2, C3 | Tl])
		     when C1 == 50, C2 == 46, C3 == 48 ->
		     {ok, [C1, C2, C3], Tl};
		 (_) -> fail
	     end,
	     maxver(),
	     '__seq'([minver(),
		      fun ([59 | Tl]) -> {ok, 59, Tl};
			  (_) -> fail
		      end,
		      maxver()])]).

minver() ->
    fun ([C1, C2, C3 | Tl])
	    when C1 == 50, C2 == 46, C3 == 48 ->
	    {ok, [C1, C2, C3], Tl};
	(_) -> fail
    end.

maxver() ->
    fun ([C1, C2, C3 | Tl])
	    when C1 == 50, C2 == 46, C3 == 48 ->
	    {ok, [C1, C2, C3], Tl};
	(_) -> fail
    end.

attach() ->
    '__alt'(['__seq'([fun ([C1, C2, C3, C4, C5, C6 | Tl])
			      when (C1 == 97) or (C1 == 65),
				   (C2 == 116) or (C2 == 84), (C3 == 116) or (C3 == 84),
				   (C4 == 97) or (C4 == 65), (C5 == 99) or (C5 == 67),
				   (C6 == 104) or (C6 == 72) ->
			      {ok, [C1, C2, C3, C4, C5, C6], Tl};
			  (_) -> fail
		      end,
		      attachparam(),
		      '__seq'([fun ([58 | Tl]) -> {ok, 58, Tl};
				   (_) -> fail
			       end,
			       uri()])]),
	     '__seq'(['__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				   (_) -> fail
			       end,
			       fun ([C1, C2, C3, C4, C5, C6, C7, C8 | Tl])
				       when (C1 == 101) or (C1 == 69),
					    (C2 == 110) or (C2 == 78),
					    (C3 == 99) or (C3 == 67),
					    (C4 == 111) or (C4 == 79),
					    (C5 == 100) or (C5 == 68),
					    (C6 == 105) or (C6 == 73),
					    (C7 == 110) or (C7 == 78),
					    (C8 == 103) or (C8 == 71) ->
				       {ok, [C1, C2, C3, C4, C5, C6, C7, C8], Tl};
				   (_) -> fail
			       end,
			       fun ([61 | Tl]) -> {ok, 61, Tl};
				   (_) -> fail
			       end,
			       fun ([C1, C2, C3, C4, C5, C6 | Tl])
				       when (C1 == 98) or (C1 == 66), (C2 == 97) or (C2 == 65),
					    (C3 == 115) or (C3 == 83),
					    (C4 == 101) or (C4 == 69), C5 == 54, C6 == 52 ->
				       {ok, [C1, C2, C3, C4, C5, C6], Tl};
				   (_) -> fail
			       end,
			       fun ([59 | Tl]) -> {ok, 59, Tl};
				   (_) -> fail
			       end,
			       fun ([C1, C2, C3, C4, C5 | Tl])
				       when (C1 == 118) or (C1 == 86),
					    (C2 == 97) or (C2 == 65),
					    (C3 == 108) or (C3 == 76),
					    (C4 == 117) or (C4 == 85),
					    (C5 == 101) or (C5 == 69) ->
				       {ok, [C1, C2, C3, C4, C5], Tl};
				   (_) -> fail
			       end,
			       fun ([61 | Tl]) -> {ok, 61, Tl};
				   (_) -> fail
			       end,
			       fun ([C1, C2, C3, C4, C5, C6 | Tl])
				       when (C1 == 98) or (C1 == 66),
					    (C2 == 105) or (C2 == 73),
					    (C3 == 110) or (C3 == 78),
					    (C4 == 97) or (C4 == 65),
					    (C5 == 114) or (C5 == 82),
					    (C6 == 121) or (C6 == 89) ->
				       {ok, [C1, C2, C3, C4, C5, C6], Tl};
				   (_) -> fail
			       end,
			       fun ([58 | Tl]) -> {ok, 58, Tl};
				   (_) -> fail
			       end,
			       binary()]),
		      'CRLF'()])]).

attachparam() ->
    '__repeat'(0, infinity,
	       '__alt'(['__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 fmttypeparam()]),
			'__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 'other-param'()])])).

categories() ->
    '__seq'([fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9, C10
		   | Tl])
		     when (C1 == 99) or (C1 == 67), (C2 == 97) or (C2 == 65),
			  (C3 == 116) or (C3 == 84), (C4 == 101) or (C4 == 69),
			  (C5 == 103) or (C5 == 71), (C6 == 111) or (C6 == 79),
			  (C7 == 114) or (C7 == 82), (C8 == 105) or (C8 == 73),
			  (C9 == 101) or (C9 == 69),
			  (C10 == 115) or (C10 == 83) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10], Tl};
		 (_) -> fail
	     end,
	     catparam(),
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     text(),
	     '__repeat'(0, infinity,
			'__seq'([fun ([44 | Tl]) -> {ok, 44, Tl};
				     (_) -> fail
				 end,
				 text()])),
	     'CRLF'()]).

catparam() ->
    '__repeat'(0, infinity,
	       '__alt'(['__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 languageparam()]),
			'__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 'other-param'()])])).

class() ->
    '__seq'([fun ([C1, C2, C3, C4, C5 | Tl])
		     when (C1 == 99) or (C1 == 67),
			  (C2 == 108) or (C2 == 76), (C3 == 97) or (C3 == 65),
			  (C4 == 115) or (C4 == 83), (C5 == 115) or (C5 == 83) ->
		     {ok, [C1, C2, C3, C4, C5], Tl};
		 (_) -> fail
	     end,
	     classparam(),
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     classvalue(), 'CRLF'()]).

classparam() ->
    '__repeat'(0, infinity,
	       '__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
			    (_) -> fail
			end,
			'other-param'()])).

classvalue() ->
    '__alt'([fun ([C1, C2, C3, C4, C5, C6 | Tl])
		     when (C1 == 112) or (C1 == 80),
			  (C2 == 117) or (C2 == 85), (C3 == 98) or (C3 == 66),
			  (C4 == 108) or (C4 == 76), (C5 == 105) or (C5 == 73),
			  (C6 == 99) or (C6 == 67) ->
		     {ok, [C1, C2, C3, C4, C5, C6], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6, C7 | Tl])
		     when (C1 == 112) or (C1 == 80),
			  (C2 == 114) or (C2 == 82), (C3 == 105) or (C3 == 73),
			  (C4 == 118) or (C4 == 86), (C5 == 97) or (C5 == 65),
			  (C6 == 116) or (C6 == 84), (C7 == 101) or (C7 == 69) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12
		   | Tl])
		     when (C1 == 99) or (C1 == 67),
			  (C2 == 111) or (C2 == 79), (C3 == 110) or (C3 == 78),
			  (C4 == 102) or (C4 == 70), (C5 == 105) or (C5 == 73),
			  (C6 == 100) or (C6 == 68), (C7 == 101) or (C7 == 69),
			  (C8 == 110) or (C8 == 78), (C9 == 116) or (C9 == 84),
			  (C10 == 105) or (C10 == 73), (C11 == 97) or (C11 == 65),
			  (C12 == 108) or (C12 == 76) ->
		     {ok,
		      [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12],
		      Tl};
		 (_) -> fail
	     end,
	     'iana-token'(), 'x-name'()]).

comment() ->
    '__seq'([fun ([C1, C2, C3, C4, C5, C6, C7 | Tl])
		     when (C1 == 99) or (C1 == 67),
			  (C2 == 111) or (C2 == 79), (C3 == 109) or (C3 == 77),
			  (C4 == 109) or (C4 == 77), (C5 == 101) or (C5 == 69),
			  (C6 == 110) or (C6 == 78), (C7 == 116) or (C7 == 84) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7], Tl};
		 (_) -> fail
	     end,
	     commparam(),
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     text(), 'CRLF'()]).

commparam() ->
    '__repeat'(0, infinity,
	       '__alt'(['__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 altrepparam()]),
			'__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 languageparam()]),
			'__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 'other-param'()])])).

description() ->
    '__seq'([fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9, C10,
		   C11
		   | Tl])
		     when (C1 == 100) or (C1 == 68),
			  (C2 == 101) or (C2 == 69), (C3 == 115) or (C3 == 83),
			  (C4 == 99) or (C4 == 67), (C5 == 114) or (C5 == 82),
			  (C6 == 105) or (C6 == 73), (C7 == 112) or (C7 == 80),
			  (C8 == 116) or (C8 == 84), (C9 == 105) or (C9 == 73),
			  (C10 == 111) or (C10 == 79),
			  (C11 == 110) or (C11 == 78) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11],
		      Tl};
		 (_) -> fail
	     end,
	     descparam(),
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     text(), 'CRLF'()]).

descparam() ->
    '__repeat'(0, infinity,
	       '__alt'(['__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 altrepparam()]),
			'__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 languageparam()]),
			'__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 'other-param'()])])).

geo() ->
    '__seq'([fun ([C1, C2, C3 | Tl])
		     when (C1 == 103) or (C1 == 71),
			  (C2 == 101) or (C2 == 69), (C3 == 111) or (C3 == 79) ->
		     {ok, [C1, C2, C3], Tl};
		 (_) -> fail
	     end,
	     geoparam(),
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     geovalue(), 'CRLF'()]).

geoparam() ->
    '__repeat'(0, infinity,
	       '__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
			    (_) -> fail
			end,
			'other-param'()])).

geovalue() ->
    '__seq'([float(),
	     fun ([59 | Tl]) -> {ok, 59, Tl};
		 (_) -> fail
	     end,
	     float()]).

location() ->
    '__seq'([fun ([C1, C2, C3, C4, C5, C6, C7, C8 | Tl])
		     when (C1 == 108) or (C1 == 76),
			  (C2 == 111) or (C2 == 79), (C3 == 99) or (C3 == 67),
			  (C4 == 97) or (C4 == 65), (C5 == 116) or (C5 == 84),
			  (C6 == 105) or (C6 == 73), (C7 == 111) or (C7 == 79),
			  (C8 == 110) or (C8 == 78) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8], Tl};
		 (_) -> fail
	     end,
	     locparam(),
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     text(), 'CRLF'()]).

locparam() ->
    '__repeat'(0, infinity,
	       '__alt'(['__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 altrepparam()]),
			'__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 languageparam()]),
			'__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 'other-param'()])])).

percent() ->
    '__seq'([fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9, C10,
		   C11, C12, C13, C14, C15, C16
		   | Tl])
		     when (C1 == 112) or (C1 == 80),
			  (C2 == 101) or (C2 == 69), (C3 == 114) or (C3 == 82),
			  (C4 == 99) or (C4 == 67), (C5 == 101) or (C5 == 69),
			  (C6 == 110) or (C6 == 78), (C7 == 116) or (C7 == 84),
			  C8 == 45, (C9 == 99) or (C9 == 67),
			  (C10 == 111) or (C10 == 79),
			  (C11 == 109) or (C11 == 77),
			  (C12 == 112) or (C12 == 80),
			  (C13 == 108) or (C13 == 76),
			  (C14 == 101) or (C14 == 69),
			  (C15 == 116) or (C15 == 84),
			  (C16 == 101) or (C16 == 69) ->
		     {ok,
		      [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13,
		       C14, C15, C16],
		      Tl};
		 (_) -> fail
	     end,
	     pctparam(),
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     integer(), 'CRLF'()]).

pctparam() ->
    '__repeat'(0, infinity,
	       '__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
			    (_) -> fail
			end,
			'other-param'()])).

priority() ->
    '__seq'([fun ([C1, C2, C3, C4, C5, C6, C7, C8 | Tl])
		     when (C1 == 112) or (C1 == 80),
			  (C2 == 114) or (C2 == 82), (C3 == 105) or (C3 == 73),
			  (C4 == 111) or (C4 == 79), (C5 == 114) or (C5 == 82),
			  (C6 == 105) or (C6 == 73), (C7 == 116) or (C7 == 84),
			  (C8 == 121) or (C8 == 89) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8], Tl};
		 (_) -> fail
	     end,
	     prioparam(),
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     priovalue(), 'CRLF'()]).

prioparam() ->
    '__repeat'(0, infinity,
	       '__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
			    (_) -> fail
			end,
			'other-param'()])).

priovalue() -> integer().

resources() ->
    '__seq'([fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9 | Tl])
		     when (C1 == 114) or (C1 == 82),
			  (C2 == 101) or (C2 == 69), (C3 == 115) or (C3 == 83),
			  (C4 == 111) or (C4 == 79), (C5 == 117) or (C5 == 85),
			  (C6 == 114) or (C6 == 82), (C7 == 99) or (C7 == 67),
			  (C8 == 101) or (C8 == 69), (C9 == 115) or (C9 == 83) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9], Tl};
		 (_) -> fail
	     end,
	     resrcparam(),
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     text(),
	     '__repeat'(0, infinity,
			'__seq'([fun ([44 | Tl]) -> {ok, 44, Tl};
				     (_) -> fail
				 end,
				 text()])),
	     'CRLF'()]).

resrcparam() ->
    '__repeat'(0, infinity,
	       '__alt'(['__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 altrepparam()]),
			'__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 languageparam()]),
			'__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 'other-param'()])])).

status() ->
    '__seq'([fun ([C1, C2, C3, C4, C5, C6 | Tl])
		     when (C1 == 115) or (C1 == 83),
			  (C2 == 116) or (C2 == 84), (C3 == 97) or (C3 == 65),
			  (C4 == 116) or (C4 == 84), (C5 == 117) or (C5 == 85),
			  (C6 == 115) or (C6 == 83) ->
		     {ok, [C1, C2, C3, C4, C5, C6], Tl};
		 (_) -> fail
	     end,
	     statparam(),
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     statvalue(), 'CRLF'()]).

statparam() ->
    '__repeat'(0, infinity,
	       '__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
			    (_) -> fail
			end,
			'other-param'()])).

statvalue() ->
    '__alt'(['statvalue-event'(), 'statvalue-todo'(),
	     'statvalue-jour'()]).

'statvalue-event'() ->
    '__alt'([fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9 | Tl])
		     when (C1 == 116) or (C1 == 84),
			  (C2 == 101) or (C2 == 69), (C3 == 110) or (C3 == 78),
			  (C4 == 116) or (C4 == 84), (C5 == 97) or (C5 == 65),
			  (C6 == 116) or (C6 == 84), (C7 == 105) or (C7 == 73),
			  (C8 == 118) or (C8 == 86), (C9 == 101) or (C9 == 69) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9 | Tl])
		     when (C1 == 99) or (C1 == 67),
			  (C2 == 111) or (C2 == 79), (C3 == 110) or (C3 == 78),
			  (C4 == 102) or (C4 == 70), (C5 == 105) or (C5 == 73),
			  (C6 == 114) or (C6 == 82), (C7 == 109) or (C7 == 77),
			  (C8 == 101) or (C8 == 69), (C9 == 100) or (C9 == 68) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9 | Tl])
		     when (C1 == 99) or (C1 == 67), (C2 == 97) or (C2 == 65),
			  (C3 == 110) or (C3 == 78), (C4 == 99) or (C4 == 67),
			  (C5 == 101) or (C5 == 69), (C6 == 108) or (C6 == 76),
			  (C7 == 108) or (C7 == 76), (C8 == 101) or (C8 == 69),
			  (C9 == 100) or (C9 == 68) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9], Tl};
		 (_) -> fail
	     end]).

'statvalue-todo'() ->
    '__alt'([fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9, C10,
		   C11, C12
		   | Tl])
		     when (C1 == 110) or (C1 == 78),
			  (C2 == 101) or (C2 == 69), (C3 == 101) or (C3 == 69),
			  (C4 == 100) or (C4 == 68), (C5 == 115) or (C5 == 83),
			  C6 == 45, (C7 == 97) or (C7 == 65),
			  (C8 == 99) or (C8 == 67), (C9 == 116) or (C9 == 84),
			  (C10 == 105) or (C10 == 73),
			  (C11 == 111) or (C11 == 79),
			  (C12 == 110) or (C12 == 78) ->
		     {ok,
		      [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12],
		      Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9 | Tl])
		     when (C1 == 99) or (C1 == 67),
			  (C2 == 111) or (C2 == 79), (C3 == 109) or (C3 == 77),
			  (C4 == 112) or (C4 == 80), (C5 == 108) or (C5 == 76),
			  (C6 == 101) or (C6 == 69), (C7 == 116) or (C7 == 84),
			  (C8 == 101) or (C8 == 69), (C9 == 100) or (C9 == 68) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9, C10 | Tl])
		     when (C1 == 105) or (C1 == 73),
			  (C2 == 110) or (C2 == 78), C3 == 45,
			  (C4 == 112) or (C4 == 80), (C5 == 114) or (C5 == 82),
			  (C6 == 111) or (C6 == 79), (C7 == 99) or (C7 == 67),
			  (C8 == 101) or (C8 == 69), (C9 == 115) or (C9 == 83),
			  (C10 == 115) or (C10 == 83) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9 | Tl])
		     when (C1 == 99) or (C1 == 67), (C2 == 97) or (C2 == 65),
			  (C3 == 110) or (C3 == 78), (C4 == 99) or (C4 == 67),
			  (C5 == 101) or (C5 == 69), (C6 == 108) or (C6 == 76),
			  (C7 == 108) or (C7 == 76), (C8 == 101) or (C8 == 69),
			  (C9 == 100) or (C9 == 68) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9], Tl};
		 (_) -> fail
	     end]).

'statvalue-jour'() ->
    '__alt'([fun ([C1, C2, C3, C4, C5 | Tl])
		     when (C1 == 100) or (C1 == 68),
			  (C2 == 114) or (C2 == 82), (C3 == 97) or (C3 == 65),
			  (C4 == 102) or (C4 == 70), (C5 == 116) or (C5 == 84) ->
		     {ok, [C1, C2, C3, C4, C5], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5 | Tl])
		     when (C1 == 102) or (C1 == 70),
			  (C2 == 105) or (C2 == 73), (C3 == 110) or (C3 == 78),
			  (C4 == 97) or (C4 == 65), (C5 == 108) or (C5 == 76) ->
		     {ok, [C1, C2, C3, C4, C5], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9 | Tl])
		     when (C1 == 99) or (C1 == 67), (C2 == 97) or (C2 == 65),
			  (C3 == 110) or (C3 == 78), (C4 == 99) or (C4 == 67),
			  (C5 == 101) or (C5 == 69), (C6 == 108) or (C6 == 76),
			  (C7 == 108) or (C7 == 76), (C8 == 101) or (C8 == 69),
			  (C9 == 100) or (C9 == 68) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9], Tl};
		 (_) -> fail
	     end]).

summary() ->
    '__seq'([fun ([C1, C2, C3, C4, C5, C6, C7 | Tl])
		     when (C1 == 115) or (C1 == 83),
			  (C2 == 117) or (C2 == 85), (C3 == 109) or (C3 == 77),
			  (C4 == 109) or (C4 == 77), (C5 == 97) or (C5 == 65),
			  (C6 == 114) or (C6 == 82), (C7 == 121) or (C7 == 89) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7], Tl};
		 (_) -> fail
	     end,
	     summparam(),
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     text(), 'CRLF'()]).

summparam() ->
    '__repeat'(0, infinity,
	       '__alt'(['__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 altrepparam()]),
			'__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 languageparam()]),
			'__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 'other-param'()])])).

completed() ->
    '__seq'([fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9 | Tl])
		     when (C1 == 99) or (C1 == 67),
			  (C2 == 111) or (C2 == 79), (C3 == 109) or (C3 == 77),
			  (C4 == 112) or (C4 == 80), (C5 == 108) or (C5 == 76),
			  (C6 == 101) or (C6 == 69), (C7 == 116) or (C7 == 84),
			  (C8 == 101) or (C8 == 69), (C9 == 100) or (C9 == 68) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9], Tl};
		 (_) -> fail
	     end,
	     compparam(),
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     'date-time'(), 'CRLF'()]).

compparam() ->
    '__repeat'(0, infinity,
	       '__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
			    (_) -> fail
			end,
			'other-param'()])).

dtend() ->
    '__seq'([fun ([C1, C2, C3, C4, C5 | Tl])
		     when (C1 == 100) or (C1 == 68),
			  (C2 == 116) or (C2 == 84), (C3 == 101) or (C3 == 69),
			  (C4 == 110) or (C4 == 78), (C5 == 100) or (C5 == 68) ->
		     {ok, [C1, C2, C3, C4, C5], Tl};
		 (_) -> fail
	     end,
	     dtendparam(),
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     dtendval(), 'CRLF'()]).

dtendparam() ->
    '__repeat'(0, infinity,
	       '__alt'(['__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 fun ([C1, C2, C3, C4, C5 | Tl])
					 when (C1 == 118) or (C1 == 86),
					      (C2 == 97) or (C2 == 65),
					      (C3 == 108) or (C3 == 76),
					      (C4 == 117) or (C4 == 85),
					      (C5 == 101) or (C5 == 69) ->
					 {ok, [C1, C2, C3, C4, C5], Tl};
				     (_) -> fail
				 end,
				 fun ([61 | Tl]) -> {ok, 61, Tl};
				     (_) -> fail
				 end,
				 '__alt'([fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9 | Tl])
						  when (C1 == 100) or (C1 == 68),
						       (C2 == 97) or (C2 == 65),
						       (C3 == 116) or (C3 == 84),
						       (C4 == 101) or (C4 == 69), C5 == 45,
						       (C6 == 116) or (C6 == 84),
						       (C7 == 105) or (C7 == 73),
						       (C8 == 109) or (C8 == 77),
						       (C9 == 101) or (C9 == 69) ->
						  {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9],
						   Tl};
					      (_) -> fail
					  end,
					  fun ([C1, C2, C3, C4 | Tl])
						  when (C1 == 100) or (C1 == 68),
						       (C2 == 97) or (C2 == 65),
						       (C3 == 116) or (C3 == 84),
						       (C4 == 101) or (C4 == 69) ->
						  {ok, [C1, C2, C3, C4], Tl};
					      (_) -> fail
					  end])]),
			'__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 tzidparam()]),
			'__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 'other-param'()])])).

dtendval() -> '__alt'(['date-time'(), date()]).

due() ->
    '__seq'([fun ([C1, C2, C3 | Tl])
		     when (C1 == 100) or (C1 == 68),
			  (C2 == 117) or (C2 == 85), (C3 == 101) or (C3 == 69) ->
		     {ok, [C1, C2, C3], Tl};
		 (_) -> fail
	     end,
	     dueparam(),
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     dueval(), 'CRLF'()]).

dueparam() ->
    '__repeat'(0, infinity,
	       '__alt'(['__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 fun ([C1, C2, C3, C4, C5 | Tl])
					 when (C1 == 118) or (C1 == 86),
					      (C2 == 97) or (C2 == 65),
					      (C3 == 108) or (C3 == 76),
					      (C4 == 117) or (C4 == 85),
					      (C5 == 101) or (C5 == 69) ->
					 {ok, [C1, C2, C3, C4, C5], Tl};
				     (_) -> fail
				 end,
				 fun ([61 | Tl]) -> {ok, 61, Tl};
				     (_) -> fail
				 end,
				 '__alt'([fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9 | Tl])
						  when (C1 == 100) or (C1 == 68),
						       (C2 == 97) or (C2 == 65),
						       (C3 == 116) or (C3 == 84),
						       (C4 == 101) or (C4 == 69), C5 == 45,
						       (C6 == 116) or (C6 == 84),
						       (C7 == 105) or (C7 == 73),
						       (C8 == 109) or (C8 == 77),
						       (C9 == 101) or (C9 == 69) ->
						  {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9],
						   Tl};
					      (_) -> fail
					  end,
					  fun ([C1, C2, C3, C4 | Tl])
						  when (C1 == 100) or (C1 == 68),
						       (C2 == 97) or (C2 == 65),
						       (C3 == 116) or (C3 == 84),
						       (C4 == 101) or (C4 == 69) ->
						  {ok, [C1, C2, C3, C4], Tl};
					      (_) -> fail
					  end])]),
			'__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 tzidparam()]),
			'__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 'other-param'()])])).

dueval() -> '__alt'(['date-time'(), date()]).

dtstart() ->
    '__seq'([fun ([C1, C2, C3, C4, C5, C6, C7 | Tl])
		     when (C1 == 100) or (C1 == 68),
			  (C2 == 116) or (C2 == 84), (C3 == 115) or (C3 == 83),
			  (C4 == 116) or (C4 == 84), (C5 == 97) or (C5 == 65),
			  (C6 == 114) or (C6 == 82), (C7 == 116) or (C7 == 84) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7], Tl};
		 (_) -> fail
	     end,
	     dtstparam(),
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     dtstval(), 'CRLF'()]).

dtstparam() ->
    '__repeat'(0, infinity,
	       '__alt'(['__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 fun ([C1, C2, C3, C4, C5 | Tl])
					 when (C1 == 118) or (C1 == 86),
					      (C2 == 97) or (C2 == 65),
					      (C3 == 108) or (C3 == 76),
					      (C4 == 117) or (C4 == 85),
					      (C5 == 101) or (C5 == 69) ->
					 {ok, [C1, C2, C3, C4, C5], Tl};
				     (_) -> fail
				 end,
				 fun ([61 | Tl]) -> {ok, 61, Tl};
				     (_) -> fail
				 end,
				 '__alt'([fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9 | Tl])
						  when (C1 == 100) or (C1 == 68),
						       (C2 == 97) or (C2 == 65),
						       (C3 == 116) or (C3 == 84),
						       (C4 == 101) or (C4 == 69), C5 == 45,
						       (C6 == 116) or (C6 == 84),
						       (C7 == 105) or (C7 == 73),
						       (C8 == 109) or (C8 == 77),
						       (C9 == 101) or (C9 == 69) ->
						  {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9],
						   Tl};
					      (_) -> fail
					  end,
					  fun ([C1, C2, C3, C4 | Tl])
						  when (C1 == 100) or (C1 == 68),
						       (C2 == 97) or (C2 == 65),
						       (C3 == 116) or (C3 == 84),
						       (C4 == 101) or (C4 == 69) ->
						  {ok, [C1, C2, C3, C4], Tl};
					      (_) -> fail
					  end])]),
			'__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 tzidparam()]),
			'__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 'other-param'()])])).

dtstval() -> '__alt'(['date-time'(), date()]).

duration() ->
    '__seq'([fun ([C1, C2, C3, C4, C5, C6, C7, C8 | Tl])
		     when (C1 == 100) or (C1 == 68),
			  (C2 == 117) or (C2 == 85), (C3 == 114) or (C3 == 82),
			  (C4 == 97) or (C4 == 65), (C5 == 116) or (C5 == 84),
			  (C6 == 105) or (C6 == 73), (C7 == 111) or (C7 == 79),
			  (C8 == 110) or (C8 == 78) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8], Tl};
		 (_) -> fail
	     end,
	     durparam(),
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     'dur-value'(), 'CRLF'()]).

durparam() ->
    '__repeat'(0, infinity,
	       '__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
			    (_) -> fail
			end,
			'other-param'()])).

freebusy() ->
    '__seq'([fun ([C1, C2, C3, C4, C5, C6, C7, C8 | Tl])
		     when (C1 == 102) or (C1 == 70),
			  (C2 == 114) or (C2 == 82), (C3 == 101) or (C3 == 69),
			  (C4 == 101) or (C4 == 69), (C5 == 98) or (C5 == 66),
			  (C6 == 117) or (C6 == 85), (C7 == 115) or (C7 == 83),
			  (C8 == 121) or (C8 == 89) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8], Tl};
		 (_) -> fail
	     end,
	     fbparam(),
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     fbvalue(), 'CRLF'()]).

fbparam() ->
    '__repeat'(0, infinity,
	       '__alt'(['__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 fbtypeparam()]),
			'__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 'other-param'()])])).

fbvalue() ->
    '__seq'([period(),
	     '__repeat'(0, infinity,
			'__seq'([fun ([44 | Tl]) -> {ok, 44, Tl};
				     (_) -> fail
				 end,
				 period()]))]).

transp() ->
    '__seq'([fun ([C1, C2, C3, C4, C5, C6 | Tl])
		     when (C1 == 116) or (C1 == 84),
			  (C2 == 114) or (C2 == 82), (C3 == 97) or (C3 == 65),
			  (C4 == 110) or (C4 == 78), (C5 == 115) or (C5 == 83),
			  (C6 == 112) or (C6 == 80) ->
		     {ok, [C1, C2, C3, C4, C5, C6], Tl};
		 (_) -> fail
	     end,
	     transparam(),
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     transvalue(), 'CRLF'()]).

transparam() ->
    '__repeat'(0, infinity,
	       '__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
			    (_) -> fail
			end,
			'other-param'()])).

transvalue() ->
    '__alt'([fun ([C1, C2, C3, C4, C5, C6 | Tl])
		     when (C1 == 111) or (C1 == 79),
			  (C2 == 112) or (C2 == 80), (C3 == 97) or (C3 == 65),
			  (C4 == 113) or (C4 == 81), (C5 == 117) or (C5 == 85),
			  (C6 == 101) or (C6 == 69) ->
		     {ok, [C1, C2, C3, C4, C5, C6], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11
		   | Tl])
		     when (C1 == 116) or (C1 == 84),
			  (C2 == 114) or (C2 == 82), (C3 == 97) or (C3 == 65),
			  (C4 == 110) or (C4 == 78), (C5 == 115) or (C5 == 83),
			  (C6 == 112) or (C6 == 80), (C7 == 97) or (C7 == 65),
			  (C8 == 114) or (C8 == 82), (C9 == 101) or (C9 == 69),
			  (C10 == 110) or (C10 == 78),
			  (C11 == 116) or (C11 == 84) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11],
		      Tl};
		 (_) -> fail
	     end]).

tzid() ->
    '__seq'([fun ([C1, C2, C3, C4 | Tl])
		     when (C1 == 116) or (C1 == 84),
			  (C2 == 122) or (C2 == 90), (C3 == 105) or (C3 == 73),
			  (C4 == 100) or (C4 == 68) ->
		     {ok, [C1, C2, C3, C4], Tl};
		 (_) -> fail
	     end,
	     tzidpropparam(),
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     '__repeat'(0, 1, tzidprefix()), text(), 'CRLF'()]).

tzidpropparam() ->
    '__repeat'(0, infinity,
	       '__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
			    (_) -> fail
			end,
			'other-param'()])).

tzname() ->
    '__seq'([fun ([C1, C2, C3, C4, C5, C6 | Tl])
		     when (C1 == 116) or (C1 == 84),
			  (C2 == 122) or (C2 == 90), (C3 == 110) or (C3 == 78),
			  (C4 == 97) or (C4 == 65), (C5 == 109) or (C5 == 77),
			  (C6 == 101) or (C6 == 69) ->
		     {ok, [C1, C2, C3, C4, C5, C6], Tl};
		 (_) -> fail
	     end,
	     tznparam(),
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     text(), 'CRLF'()]).

tznparam() ->
    '__repeat'(0, infinity,
	       '__alt'(['__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 languageparam()]),
			'__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 'other-param'()])])).

tzoffsetfrom() ->
    '__seq'([fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9, C10,
		   C11, C12
		   | Tl])
		     when (C1 == 116) or (C1 == 84),
			  (C2 == 122) or (C2 == 90), (C3 == 111) or (C3 == 79),
			  (C4 == 102) or (C4 == 70), (C5 == 102) or (C5 == 70),
			  (C6 == 115) or (C6 == 83), (C7 == 101) or (C7 == 69),
			  (C8 == 116) or (C8 == 84), (C9 == 102) or (C9 == 70),
			  (C10 == 114) or (C10 == 82),
			  (C11 == 111) or (C11 == 79),
			  (C12 == 109) or (C12 == 77) ->
		     {ok,
		      [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12],
		      Tl};
		 (_) -> fail
	     end,
	     frmparam(),
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     'utc-offset'(), 'CRLF'()]).

frmparam() ->
    '__repeat'(0, infinity,
	       '__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
			    (_) -> fail
			end,
			'other-param'()])).

tzoffsetto() ->
    '__seq'([fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9, C10
		   | Tl])
		     when (C1 == 116) or (C1 == 84),
			  (C2 == 122) or (C2 == 90), (C3 == 111) or (C3 == 79),
			  (C4 == 102) or (C4 == 70), (C5 == 102) or (C5 == 70),
			  (C6 == 115) or (C6 == 83), (C7 == 101) or (C7 == 69),
			  (C8 == 116) or (C8 == 84), (C9 == 116) or (C9 == 84),
			  (C10 == 111) or (C10 == 79) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10], Tl};
		 (_) -> fail
	     end,
	     toparam(),
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     'utc-offset'(), 'CRLF'()]).

toparam() ->
    '__repeat'(0, infinity,
	       '__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
			    (_) -> fail
			end,
			'other-param'()])).

tzurl() ->
    '__seq'([fun ([C1, C2, C3, C4, C5 | Tl])
		     when (C1 == 116) or (C1 == 84),
			  (C2 == 122) or (C2 == 90), (C3 == 117) or (C3 == 85),
			  (C4 == 114) or (C4 == 82), (C5 == 108) or (C5 == 76) ->
		     {ok, [C1, C2, C3, C4, C5], Tl};
		 (_) -> fail
	     end,
	     tzurlparam(),
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     uri(), 'CRLF'()]).

tzurlparam() ->
    '__repeat'(0, infinity,
	       '__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
			    (_) -> fail
			end,
			'other-param'()])).

attendee() ->
    '__seq'([fun ([C1, C2, C3, C4, C5, C6, C7, C8 | Tl])
		     when (C1 == 97) or (C1 == 65),
			  (C2 == 116) or (C2 == 84), (C3 == 116) or (C3 == 84),
			  (C4 == 101) or (C4 == 69), (C5 == 110) or (C5 == 78),
			  (C6 == 100) or (C6 == 68), (C7 == 101) or (C7 == 69),
			  (C8 == 101) or (C8 == 69) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8], Tl};
		 (_) -> fail
	     end,
	     attparam(),
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     'cal-address'(), 'CRLF'()]).

attparam() ->
    '__repeat'(0, infinity,
	       '__alt'(['__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 cutypeparam()]),
			'__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 memberparam()]),
			'__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 roleparam()]),
			'__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 partstatparam()]),
			'__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 rsvpparam()]),
			'__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 deltoparam()]),
			'__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 delfromparam()]),
			'__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 sentbyparam()]),
			'__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 cnparam()]),
			'__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 dirparam()]),
			'__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 languageparam()]),
			'__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 'other-param'()])])).

contact() ->
    '__seq'([fun ([C1, C2, C3, C4, C5, C6, C7 | Tl])
		     when (C1 == 99) or (C1 == 67),
			  (C2 == 111) or (C2 == 79), (C3 == 110) or (C3 == 78),
			  (C4 == 116) or (C4 == 84), (C5 == 97) or (C5 == 65),
			  (C6 == 99) or (C6 == 67), (C7 == 116) or (C7 == 84) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7], Tl};
		 (_) -> fail
	     end,
	     contparam(),
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     text(), 'CRLF'()]).

contparam() ->
    '__repeat'(0, infinity,
	       '__alt'(['__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 altrepparam()]),
			'__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 languageparam()]),
			'__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 'other-param'()])])).

organizer() ->
    '__seq'([fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9 | Tl])
		     when (C1 == 111) or (C1 == 79),
			  (C2 == 114) or (C2 == 82), (C3 == 103) or (C3 == 71),
			  (C4 == 97) or (C4 == 65), (C5 == 110) or (C5 == 78),
			  (C6 == 105) or (C6 == 73), (C7 == 122) or (C7 == 90),
			  (C8 == 101) or (C8 == 69), (C9 == 114) or (C9 == 82) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9], Tl};
		 (_) -> fail
	     end,
	     orgparam(),
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     'cal-address'(), 'CRLF'()]).

orgparam() ->
    '__repeat'(0, infinity,
	       '__alt'(['__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 cnparam()]),
			'__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 dirparam()]),
			'__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 sentbyparam()]),
			'__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 languageparam()]),
			'__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 'other-param'()])])).

recurid() ->
    '__seq'([fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9, C10,
		   C11, C12, C13
		   | Tl])
		     when (C1 == 114) or (C1 == 82),
			  (C2 == 101) or (C2 == 69), (C3 == 99) or (C3 == 67),
			  (C4 == 117) or (C4 == 85), (C5 == 114) or (C5 == 82),
			  (C6 == 114) or (C6 == 82), (C7 == 101) or (C7 == 69),
			  (C8 == 110) or (C8 == 78), (C9 == 99) or (C9 == 67),
			  (C10 == 101) or (C10 == 69), C11 == 45,
			  (C12 == 105) or (C12 == 73),
			  (C13 == 100) or (C13 == 68) ->
		     {ok,
		      [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12,
		       C13],
		      Tl};
		 (_) -> fail
	     end,
	     ridparam(),
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     ridval(), 'CRLF'()]).

ridparam() ->
    '__repeat'(0, infinity,
	       '__alt'(['__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 fun ([C1, C2, C3, C4, C5 | Tl])
					 when (C1 == 118) or (C1 == 86),
					      (C2 == 97) or (C2 == 65),
					      (C3 == 108) or (C3 == 76),
					      (C4 == 117) or (C4 == 85),
					      (C5 == 101) or (C5 == 69) ->
					 {ok, [C1, C2, C3, C4, C5], Tl};
				     (_) -> fail
				 end,
				 fun ([61 | Tl]) -> {ok, 61, Tl};
				     (_) -> fail
				 end,
				 '__alt'([fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9 | Tl])
						  when (C1 == 100) or (C1 == 68),
						       (C2 == 97) or (C2 == 65),
						       (C3 == 116) or (C3 == 84),
						       (C4 == 101) or (C4 == 69), C5 == 45,
						       (C6 == 116) or (C6 == 84),
						       (C7 == 105) or (C7 == 73),
						       (C8 == 109) or (C8 == 77),
						       (C9 == 101) or (C9 == 69) ->
						  {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9],
						   Tl};
					      (_) -> fail
					  end,
					  fun ([C1, C2, C3, C4 | Tl])
						  when (C1 == 100) or (C1 == 68),
						       (C2 == 97) or (C2 == 65),
						       (C3 == 116) or (C3 == 84),
						       (C4 == 101) or (C4 == 69) ->
						  {ok, [C1, C2, C3, C4], Tl};
					      (_) -> fail
					  end])]),
			'__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 tzidparam()]),
			'__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 rangeparam()]),
			'__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 'other-param'()])])).

ridval() -> '__alt'(['date-time'(), date()]).

related() ->
    '__seq'([fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9, C10
		   | Tl])
		     when (C1 == 114) or (C1 == 82),
			  (C2 == 101) or (C2 == 69), (C3 == 108) or (C3 == 76),
			  (C4 == 97) or (C4 == 65), (C5 == 116) or (C5 == 84),
			  (C6 == 101) or (C6 == 69), (C7 == 100) or (C7 == 68),
			  C8 == 45, (C9 == 116) or (C9 == 84),
			  (C10 == 111) or (C10 == 79) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10], Tl};
		 (_) -> fail
	     end,
	     relparam(),
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     text(), 'CRLF'()]).

relparam() ->
    '__repeat'(0, infinity,
	       '__alt'(['__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 reltypeparam()]),
			'__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 'other-param'()])])).

url() ->
    '__seq'([fun ([C1, C2, C3 | Tl])
		     when (C1 == 117) or (C1 == 85),
			  (C2 == 114) or (C2 == 82), (C3 == 108) or (C3 == 76) ->
		     {ok, [C1, C2, C3], Tl};
		 (_) -> fail
	     end,
	     urlparam(),
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     uri(), 'CRLF'()]).

urlparam() ->
    '__repeat'(0, infinity,
	       '__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
			    (_) -> fail
			end,
			'other-param'()])).

uid() ->
    '__seq'([fun ([C1, C2, C3 | Tl])
		     when (C1 == 117) or (C1 == 85),
			  (C2 == 105) or (C2 == 73), (C3 == 100) or (C3 == 68) ->
		     {ok, [C1, C2, C3], Tl};
		 (_) -> fail
	     end,
	     uidparam(),
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     text(), 'CRLF'()]).

uidparam() ->
    '__repeat'(0, infinity,
	       '__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
			    (_) -> fail
			end,
			'other-param'()])).

exdate() ->
    '__seq'([fun ([C1, C2, C3, C4, C5, C6 | Tl])
		     when (C1 == 101) or (C1 == 69),
			  (C2 == 120) or (C2 == 88), (C3 == 100) or (C3 == 68),
			  (C4 == 97) or (C4 == 65), (C5 == 116) or (C5 == 84),
			  (C6 == 101) or (C6 == 69) ->
		     {ok, [C1, C2, C3, C4, C5, C6], Tl};
		 (_) -> fail
	     end,
	     exdtparam(),
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     exdtval(),
	     '__repeat'(0, infinity,
			'__seq'([fun ([44 | Tl]) -> {ok, 44, Tl};
				     (_) -> fail
				 end,
				 exdtval()])),
	     'CRLF'()]).

exdtparam() ->
    '__repeat'(0, infinity,
	       '__alt'(['__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 fun ([C1, C2, C3, C4, C5 | Tl])
					 when (C1 == 118) or (C1 == 86),
					      (C2 == 97) or (C2 == 65),
					      (C3 == 108) or (C3 == 76),
					      (C4 == 117) or (C4 == 85),
					      (C5 == 101) or (C5 == 69) ->
					 {ok, [C1, C2, C3, C4, C5], Tl};
				     (_) -> fail
				 end,
				 fun ([61 | Tl]) -> {ok, 61, Tl};
				     (_) -> fail
				 end,
				 '__alt'([fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9 | Tl])
						  when (C1 == 100) or (C1 == 68),
						       (C2 == 97) or (C2 == 65),
						       (C3 == 116) or (C3 == 84),
						       (C4 == 101) or (C4 == 69), C5 == 45,
						       (C6 == 116) or (C6 == 84),
						       (C7 == 105) or (C7 == 73),
						       (C8 == 109) or (C8 == 77),
						       (C9 == 101) or (C9 == 69) ->
						  {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9],
						   Tl};
					      (_) -> fail
					  end,
					  fun ([C1, C2, C3, C4 | Tl])
						  when (C1 == 100) or (C1 == 68),
						       (C2 == 97) or (C2 == 65),
						       (C3 == 116) or (C3 == 84),
						       (C4 == 101) or (C4 == 69) ->
						  {ok, [C1, C2, C3, C4], Tl};
					      (_) -> fail
					  end])]),
			'__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 tzidparam()]),
			'__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 'other-param'()])])).

exdtval() -> '__alt'(['date-time'(), date()]).

rdate() ->
    '__seq'([fun ([C1, C2, C3, C4, C5 | Tl])
		     when (C1 == 114) or (C1 == 82),
			  (C2 == 100) or (C2 == 68), (C3 == 97) or (C3 == 65),
			  (C4 == 116) or (C4 == 84), (C5 == 101) or (C5 == 69) ->
		     {ok, [C1, C2, C3, C4, C5], Tl};
		 (_) -> fail
	     end,
	     rdtparam(),
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     rdtval(),
	     '__repeat'(0, infinity,
			'__seq'([fun ([44 | Tl]) -> {ok, 44, Tl};
				     (_) -> fail
				 end,
				 rdtval()])),
	     'CRLF'()]).

rdtparam() ->
    '__repeat'(0, infinity,
	       '__alt'(['__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 fun ([C1, C2, C3, C4, C5 | Tl])
					 when (C1 == 118) or (C1 == 86),
					      (C2 == 97) or (C2 == 65),
					      (C3 == 108) or (C3 == 76),
					      (C4 == 117) or (C4 == 85),
					      (C5 == 101) or (C5 == 69) ->
					 {ok, [C1, C2, C3, C4, C5], Tl};
				     (_) -> fail
				 end,
				 fun ([61 | Tl]) -> {ok, 61, Tl};
				     (_) -> fail
				 end,
				 '__alt'([fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9 | Tl])
						  when (C1 == 100) or (C1 == 68),
						       (C2 == 97) or (C2 == 65),
						       (C3 == 116) or (C3 == 84),
						       (C4 == 101) or (C4 == 69), C5 == 45,
						       (C6 == 116) or (C6 == 84),
						       (C7 == 105) or (C7 == 73),
						       (C8 == 109) or (C8 == 77),
						       (C9 == 101) or (C9 == 69) ->
						  {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9],
						   Tl};
					      (_) -> fail
					  end,
					  fun ([C1, C2, C3, C4 | Tl])
						  when (C1 == 100) or (C1 == 68),
						       (C2 == 97) or (C2 == 65),
						       (C3 == 116) or (C3 == 84),
						       (C4 == 101) or (C4 == 69) ->
						  {ok, [C1, C2, C3, C4], Tl};
					      (_) -> fail
					  end,
					  fun ([C1, C2, C3, C4, C5, C6 | Tl])
						  when (C1 == 112) or (C1 == 80),
						       (C2 == 101) or (C2 == 69),
						       (C3 == 114) or (C3 == 82),
						       (C4 == 105) or (C4 == 73),
						       (C5 == 111) or (C5 == 79),
						       (C6 == 100) or (C6 == 68) ->
						  {ok, [C1, C2, C3, C4, C5, C6], Tl};
					      (_) -> fail
					  end])]),
			'__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 tzidparam()]),
			'__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 'other-param'()])])).

rdtval() -> '__alt'(['date-time'(), date(), period()]).

rrule() ->
    '__seq'([fun ([C1, C2, C3, C4, C5 | Tl])
		     when (C1 == 114) or (C1 == 82),
			  (C2 == 114) or (C2 == 82), (C3 == 117) or (C3 == 85),
			  (C4 == 108) or (C4 == 76), (C5 == 101) or (C5 == 69) ->
		     {ok, [C1, C2, C3, C4, C5], Tl};
		 (_) -> fail
	     end,
	     rrulparam(),
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     recur(), 'CRLF'()]).

rrulparam() ->
    '__repeat'(0, infinity,
	       '__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
			    (_) -> fail
			end,
			'other-param'()])).

action() ->
    '__seq'([fun ([C1, C2, C3, C4, C5, C6 | Tl])
		     when (C1 == 97) or (C1 == 65), (C2 == 99) or (C2 == 67),
			  (C3 == 116) or (C3 == 84), (C4 == 105) or (C4 == 73),
			  (C5 == 111) or (C5 == 79), (C6 == 110) or (C6 == 78) ->
		     {ok, [C1, C2, C3, C4, C5, C6], Tl};
		 (_) -> fail
	     end,
	     actionparam(),
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     actionvalue(), 'CRLF'()]).

actionparam() ->
    '__repeat'(0, infinity,
	       '__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
			    (_) -> fail
			end,
			'other-param'()])).

actionvalue() ->
    '__alt'([fun ([C1, C2, C3, C4, C5 | Tl])
		     when (C1 == 97) or (C1 == 65),
			  (C2 == 117) or (C2 == 85), (C3 == 100) or (C3 == 68),
			  (C4 == 105) or (C4 == 73), (C5 == 111) or (C5 == 79) ->
		     {ok, [C1, C2, C3, C4, C5], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6, C7 | Tl])
		     when (C1 == 100) or (C1 == 68),
			  (C2 == 105) or (C2 == 73), (C3 == 115) or (C3 == 83),
			  (C4 == 112) or (C4 == 80), (C5 == 108) or (C5 == 76),
			  (C6 == 97) or (C6 == 65), (C7 == 121) or (C7 == 89) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5 | Tl])
		     when (C1 == 101) or (C1 == 69),
			  (C2 == 109) or (C2 == 77), (C3 == 97) or (C3 == 65),
			  (C4 == 105) or (C4 == 73), (C5 == 108) or (C5 == 76) ->
		     {ok, [C1, C2, C3, C4, C5], Tl};
		 (_) -> fail
	     end,
	     'iana-token'(), 'x-name'()]).

repeat() ->
    '__seq'([fun ([C1, C2, C3, C4, C5, C6 | Tl])
		     when (C1 == 114) or (C1 == 82),
			  (C2 == 101) or (C2 == 69), (C3 == 112) or (C3 == 80),
			  (C4 == 101) or (C4 == 69), (C5 == 97) or (C5 == 65),
			  (C6 == 116) or (C6 == 84) ->
		     {ok, [C1, C2, C3, C4, C5, C6], Tl};
		 (_) -> fail
	     end,
	     repparam(),
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     integer(), 'CRLF'()]).

repparam() ->
    '__repeat'(0, infinity,
	       '__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
			    (_) -> fail
			end,
			'other-param'()])).

trigger() ->
    '__seq'([fun ([C1, C2, C3, C4, C5, C6, C7 | Tl])
		     when (C1 == 116) or (C1 == 84),
			  (C2 == 114) or (C2 == 82), (C3 == 105) or (C3 == 73),
			  (C4 == 103) or (C4 == 71), (C5 == 103) or (C5 == 71),
			  (C6 == 101) or (C6 == 69), (C7 == 114) or (C7 == 82) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7], Tl};
		 (_) -> fail
	     end,
	     '__alt'([trigrel(), trigabs()]), 'CRLF'()]).

trigrel() ->
    '__seq'(['__repeat'(0, infinity,
			'__alt'(['__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
					      (_) -> fail
					  end,
					  fun ([C1, C2, C3, C4, C5 | Tl])
						  when (C1 == 118) or (C1 == 86),
						       (C2 == 97) or (C2 == 65),
						       (C3 == 108) or (C3 == 76),
						       (C4 == 117) or (C4 == 85),
						       (C5 == 101) or (C5 == 69) ->
						  {ok, [C1, C2, C3, C4, C5], Tl};
					      (_) -> fail
					  end,
					  fun ([61 | Tl]) -> {ok, 61, Tl};
					      (_) -> fail
					  end,
					  fun ([C1, C2, C3, C4, C5, C6, C7, C8 | Tl])
						  when (C1 == 100) or (C1 == 68),
						       (C2 == 117) or (C2 == 85),
						       (C3 == 114) or (C3 == 82),
						       (C4 == 97) or (C4 == 65),
						       (C5 == 116) or (C5 == 84),
						       (C6 == 105) or (C6 == 73),
						       (C7 == 111) or (C7 == 79),
						       (C8 == 110) or (C8 == 78) ->
						  {ok, [C1, C2, C3, C4, C5, C6, C7, C8], Tl};
					      (_) -> fail
					  end]),
				 '__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
					      (_) -> fail
					  end,
					  trigrelparam()]),
				 '__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
					      (_) -> fail
					  end,
					  'other-param'()])])),
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     'dur-value'()]).

trigabs() ->
    '__seq'(['__repeat'(0, infinity,
			'__alt'(['__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
					      (_) -> fail
					  end,
					  fun ([C1, C2, C3, C4, C5 | Tl])
						  when (C1 == 118) or (C1 == 86),
						       (C2 == 97) or (C2 == 65),
						       (C3 == 108) or (C3 == 76),
						       (C4 == 117) or (C4 == 85),
						       (C5 == 101) or (C5 == 69) ->
						  {ok, [C1, C2, C3, C4, C5], Tl};
					      (_) -> fail
					  end,
					  fun ([61 | Tl]) -> {ok, 61, Tl};
					      (_) -> fail
					  end,
					  fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9 | Tl])
						  when (C1 == 100) or (C1 == 68),
						       (C2 == 97) or (C2 == 65),
						       (C3 == 116) or (C3 == 84),
						       (C4 == 101) or (C4 == 69), C5 == 45,
						       (C6 == 116) or (C6 == 84),
						       (C7 == 105) or (C7 == 73),
						       (C8 == 109) or (C8 == 77),
						       (C9 == 101) or (C9 == 69) ->
						  {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9],
						   Tl};
					      (_) -> fail
					  end]),
				 '__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
					      (_) -> fail
					  end,
					  'other-param'()])])),
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     'date-time'()]).

created() ->
    '__seq'([fun ([C1, C2, C3, C4, C5, C6, C7 | Tl])
		     when (C1 == 99) or (C1 == 67),
			  (C2 == 114) or (C2 == 82), (C3 == 101) or (C3 == 69),
			  (C4 == 97) or (C4 == 65), (C5 == 116) or (C5 == 84),
			  (C6 == 101) or (C6 == 69), (C7 == 100) or (C7 == 68) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7], Tl};
		 (_) -> fail
	     end,
	     creaparam(),
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     'date-time'(), 'CRLF'()]).

creaparam() ->
    '__repeat'(0, infinity,
	       '__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
			    (_) -> fail
			end,
			'other-param'()])).

dtstamp() ->
    '__seq'([fun ([C1, C2, C3, C4, C5, C6, C7 | Tl])
		     when (C1 == 100) or (C1 == 68),
			  (C2 == 116) or (C2 == 84), (C3 == 115) or (C3 == 83),
			  (C4 == 116) or (C4 == 84), (C5 == 97) or (C5 == 65),
			  (C6 == 109) or (C6 == 77), (C7 == 112) or (C7 == 80) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7], Tl};
		 (_) -> fail
	     end,
	     stmparam(),
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     'date-time'(), 'CRLF'()]).

stmparam() ->
    '__repeat'(0, infinity,
	       '__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
			    (_) -> fail
			end,
			'other-param'()])).

'last-mod'() ->
    '__seq'([fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9, C10,
		   C11, C12, C13
		   | Tl])
		     when (C1 == 108) or (C1 == 76),
			  (C2 == 97) or (C2 == 65), (C3 == 115) or (C3 == 83),
			  (C4 == 116) or (C4 == 84), C5 == 45,
			  (C6 == 109) or (C6 == 77), (C7 == 111) or (C7 == 79),
			  (C8 == 100) or (C8 == 68), (C9 == 105) or (C9 == 73),
			  (C10 == 102) or (C10 == 70),
			  (C11 == 105) or (C11 == 73),
			  (C12 == 101) or (C12 == 69),
			  (C13 == 100) or (C13 == 68) ->
		     {ok,
		      [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12,
		       C13],
		      Tl};
		 (_) -> fail
	     end,
	     lstparam(),
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     'date-time'(), 'CRLF'()]).

lstparam() ->
    '__repeat'(0, infinity,
	       '__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
			    (_) -> fail
			end,
			'other-param'()])).

seq() ->
    '__seq'([fun ([C1, C2, C3, C4, C5, C6, C7, C8 | Tl])
		     when (C1 == 115) or (C1 == 83),
			  (C2 == 101) or (C2 == 69), (C3 == 113) or (C3 == 81),
			  (C4 == 117) or (C4 == 85), (C5 == 101) or (C5 == 69),
			  (C6 == 110) or (C6 == 78), (C7 == 99) or (C7 == 67),
			  (C8 == 101) or (C8 == 69) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8], Tl};
		 (_) -> fail
	     end,
	     seqparam(),
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     integer(), 'CRLF'()]).

seqparam() ->
    '__repeat'(0, infinity,
	       '__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
			    (_) -> fail
			end,
			'other-param'()])).

'iana-prop'() ->
    '__seq'(['iana-token'(),
	     '__repeat'(0, infinity,
			'__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 icalparameter()])),
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     value(), 'CRLF'()]).

'x-prop'() ->
    '__seq'(['x-name'(),
	     '__repeat'(0, infinity,
			'__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 icalparameter()])),
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     value(), 'CRLF'()]).

rstatus() ->
    '__seq'([fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9, C10,
		   C11, C12, C13, C14
		   | Tl])
		     when (C1 == 114) or (C1 == 82),
			  (C2 == 101) or (C2 == 69), (C3 == 113) or (C3 == 81),
			  (C4 == 117) or (C4 == 85), (C5 == 101) or (C5 == 69),
			  (C6 == 115) or (C6 == 83), (C7 == 116) or (C7 == 84),
			  C8 == 45, (C9 == 115) or (C9 == 83),
			  (C10 == 116) or (C10 == 84), (C11 == 97) or (C11 == 65),
			  (C12 == 116) or (C12 == 84),
			  (C13 == 117) or (C13 == 85),
			  (C14 == 115) or (C14 == 83) ->
		     {ok,
		      [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13,
		       C14],
		      Tl};
		 (_) -> fail
	     end,
	     rstatparam(),
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     statcode(),
	     fun ([59 | Tl]) -> {ok, 59, Tl};
		 (_) -> fail
	     end,
	     statdesc(),
	     '__repeat'(0, 1,
			'__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 extdata()]))]).

rstatparam() ->
    '__repeat'(0, infinity,
	       '__alt'(['__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 languageparam()]),
			'__seq'([fun ([59 | Tl]) -> {ok, 59, Tl};
				     (_) -> fail
				 end,
				 'other-param'()])])).

statcode() ->
    '__seq'(['__repeat'(1, infinity, 'DIGIT'()),
	     '__repeat'(1, 2,
			'__seq'([fun ([46 | Tl]) -> {ok, 46, Tl};
				     (_) -> fail
				 end,
				 '__repeat'(1, infinity, 'DIGIT'())]))]).

statdesc() -> text().

extdata() -> text().

component() ->
    '__alt'([fun ([C1, C2, C3, C4, C5, C6 | Tl])
		     when (C1 == 118) or (C1 == 86),
			  (C2 == 101) or (C2 == 69), (C3 == 118) or (C3 == 86),
			  (C4 == 101) or (C4 == 69), (C5 == 110) or (C5 == 78),
			  (C6 == 116) or (C6 == 84) ->
		     {ok, [C1, C2, C3, C4, C5, C6], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5 | Tl])
		     when (C1 == 118) or (C1 == 86),
			  (C2 == 116) or (C2 == 84), (C3 == 111) or (C3 == 79),
			  (C4 == 100) or (C4 == 68), (C5 == 111) or (C5 == 79) ->
		     {ok, [C1, C2, C3, C4, C5], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6, C7, C8 | Tl])
		     when (C1 == 118) or (C1 == 86),
			  (C2 == 106) or (C2 == 74), (C3 == 111) or (C3 == 79),
			  (C4 == 117) or (C4 == 85), (C5 == 114) or (C5 == 82),
			  (C6 == 110) or (C6 == 78), (C7 == 97) or (C7 == 65),
			  (C8 == 108) or (C8 == 76) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9 | Tl])
		     when (C1 == 118) or (C1 == 86),
			  (C2 == 102) or (C2 == 70), (C3 == 114) or (C3 == 82),
			  (C4 == 101) or (C4 == 69), (C5 == 101) or (C5 == 69),
			  (C6 == 98) or (C6 == 66), (C7 == 117) or (C7 == 85),
			  (C8 == 115) or (C8 == 83), (C9 == 121) or (C9 == 89) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9 | Tl])
		     when (C1 == 118) or (C1 == 86),
			  (C2 == 116) or (C2 == 84), (C3 == 105) or (C3 == 73),
			  (C4 == 109) or (C4 == 77), (C5 == 101) or (C5 == 69),
			  (C6 == 122) or (C6 == 90), (C7 == 111) or (C7 == 79),
			  (C8 == 110) or (C8 == 78), (C9 == 101) or (C9 == 69) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9], Tl};
		 (_) -> fail
	     end,
	     'iana-token'(), 'x-name'()]).

optinfo() -> '__alt'([infovalue(), qinfovalue()]).

infovalue() -> '__alt'(['iana-token'(), 'x-name'()]).

qinfovalue() ->
    '__seq'(['DQUOTE'(), infovalue(), 'DQUOTE'()]).

'__alt'(Ps) -> fun (T) -> '__do_alt'(Ps, T) end.

'__do_alt'([P | Ps], T) ->
    case P(T) of
      {ok, _R, _T1} = Res -> Res;
      fail -> '__do_alt'(Ps, T)
    end;
'__do_alt'([], _) -> fail.

'__repeat'(Min, Max, P) -> '__repeat'(Min, Max, P, 0).

'__repeat'(Min, Max, P, Found) ->
    fun (T) -> '__do_repeat'(Min, Max, P, Found, T) end.

'__do_repeat'(Min, Max, P, Found, T) ->
    case P(T) of
      {ok, R1, T1} when Max == Found + 1 -> {ok, [R1], T1};
      {ok, R1, T1} ->
	  case '__do_repeat'(Min, Max, P, Found + 1, T1) of
	    {ok, R2, T2} -> {ok, [R1 | R2], T2};
	    fail when Found >= Min -> {ok, [R1], T1};
	    fail -> fail
	  end;
      fail when Found >= Min -> {ok, [], T};
      fail -> fail
    end.

'__seq'(Ps) -> fun (T) -> '__do_seq'(Ps, T) end.

'__do_seq'([P | Ps], T) ->
    case P(T) of
      {ok, R1, T1} ->
	  case '__do_seq'(Ps, T1) of
	    {ok, R2, T2} -> {ok, [R1 | R2], T2};
	    fail -> fail
	  end;
      fail -> fail
    end;
'__do_seq'([], T) -> {ok, [], T}.
