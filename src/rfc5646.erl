%%% Do not modify this file, it is automatically generated by abnfc.
%%% All changes will be lost when it is regenerated.
%%% Generated by abnfc_gen on 2018-07-11 15:39:46

-module(rfc5646).

-export(['CHARS'/0, 'Language-Tag'/0, alphanum/0,
	 decode/2, extension/0, extlang/0, field/0,
	 'field-body'/0, 'field-name'/0, 'field-sep'/0,
	 grandfathered/0, irregular/0, langtag/0, language/0,
	 'obs-language-tag'/0, 'primary-subtag'/0, privateuse/0,
	 record/0, region/0, registry/0, regular/0, script/0,
	 singleton/0, subtag/0, variant/0]).

-include("rfc5646.hrl").

decode('Language-Tag', Str) -> ('Language-Tag'())(Str);
decode(langtag, Str) -> (langtag())(Str);
decode(language, Str) -> (language())(Str);
decode(extlang, Str) -> (extlang())(Str);
decode(script, Str) -> (script())(Str);
decode(region, Str) -> (region())(Str);
decode(variant, Str) -> (variant())(Str);
decode(extension, Str) -> (extension())(Str);
decode(singleton, Str) -> (singleton())(Str);
decode(privateuse, Str) -> (privateuse())(Str);
decode(grandfathered, Str) -> (grandfathered())(Str);
decode(irregular, Str) -> (irregular())(Str);
decode(regular, Str) -> (regular())(Str);
decode(alphanum, Str) -> (alphanum())(Str);
decode('obs-language-tag', Str) ->
    ('obs-language-tag'())(Str);
decode('primary-subtag', Str) ->
    ('primary-subtag'())(Str);
decode(subtag, Str) -> (subtag())(Str);
decode(registry, Str) -> (registry())(Str);
decode(record, Str) -> (record())(Str);
decode(field, Str) -> (field())(Str);
decode('field-name', Str) -> ('field-name'())(Str);
decode('field-sep', Str) -> ('field-sep'())(Str);
decode('field-body', Str) -> ('field-body'())(Str);
decode('CHARS', Str) -> ('CHARS'())(Str).

'Language-Tag'() ->
    '__alt'([langtag(), privateuse(), grandfathered()]).

langtag() ->
    '__seq'([language(),
	     '__repeat'(0, 1,
			'__seq'([fun ([45 | Tl]) -> {ok, 45, Tl};
				     (_) -> fail
				 end,
				 script()])),
	     '__repeat'(0, 1,
			'__seq'([fun ([45 | Tl]) -> {ok, 45, Tl};
				     (_) -> fail
				 end,
				 region()])),
	     '__repeat'(0, infinity,
			'__seq'([fun ([45 | Tl]) -> {ok, 45, Tl};
				     (_) -> fail
				 end,
				 variant()])),
	     '__repeat'(0, infinity,
			'__seq'([fun ([45 | Tl]) -> {ok, 45, Tl};
				     (_) -> fail
				 end,
				 extension()])),
	     '__repeat'(0, 1,
			'__seq'([fun ([45 | Tl]) -> {ok, 45, Tl};
				     (_) -> fail
				 end,
				 privateuse()]))]).

language() ->
    '__alt'(['__seq'(['__repeat'(2, 3, 'ALPHA'()),
		      '__repeat'(0, 1,
				 '__seq'([fun ([45 | Tl]) -> {ok, 45, Tl};
					      (_) -> fail
					  end,
					  extlang()]))]),
	     '__repeat'(4, 4, 'ALPHA'()),
	     '__repeat'(5, 8, 'ALPHA'())]).

extlang() ->
    '__seq'(['__repeat'(3, 3, 'ALPHA'()),
	     '__repeat'(0, 2,
			'__seq'([fun ([45 | Tl]) -> {ok, 45, Tl};
				     (_) -> fail
				 end,
				 '__repeat'(3, 3, 'ALPHA'())]))]).

script() -> '__repeat'(4, 4, 'ALPHA'()).

region() ->
    '__alt'(['__repeat'(2, 2, 'ALPHA'()),
	     '__repeat'(3, 3, 'DIGIT'())]).

variant() ->
    '__alt'(['__repeat'(5, 8, alphanum()),
	     '__seq'(['DIGIT'(), '__repeat'(3, 3, alphanum())])]).

extension() ->
    '__seq'([singleton(),
	     '__repeat'(1, infinity,
			'__seq'([fun ([45 | Tl]) -> {ok, 45, Tl};
				     (_) -> fail
				 end,
				 '__repeat'(2, 8, alphanum())]))]).

singleton() ->
    '__alt'([fun ([C | Tl]) when (C >= 65) and (C =< 87) ->
		     {ok, C, Tl};
		 ([C | Tl]) when (C >= 97) and (C =< 119) -> {ok, C, Tl};
		 ([C | Tl]) when (C >= 89) and (C =< 90) -> {ok, C, Tl};
		 ([C | Tl]) when (C >= 121) and (C =< 122) ->
		     {ok, C, Tl};
		 (_) -> fail
	     end,
	     'DIGIT'()]).

privateuse() ->
    '__seq'([fun ([C | Tl]) when C == 120 -> {ok, C, Tl};
		 ([C | Tl]) when C == 88 -> {ok, C, Tl};
		 (_) -> fail
	     end,
	     '__repeat'(1, infinity,
			'__seq'([fun ([45 | Tl]) -> {ok, 45, Tl};
				     (_) -> fail
				 end,
				 '__repeat'(1, 8, alphanum())]))]).

grandfathered() -> '__alt'([irregular(), regular()]).

irregular() ->
    '__alt'([fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9 | Tl])
		     when (C1 == 101) or (C1 == 69),
			  (C2 == 110) or (C2 == 78), C3 == 45,
			  (C4 == 103) or (C4 == 71), (C5 == 98) or (C5 == 66),
			  C6 == 45, (C7 == 111) or (C7 == 79),
			  (C8 == 101) or (C8 == 69), (C9 == 100) or (C9 == 68) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5 | Tl])
		     when (C1 == 105) or (C1 == 73), C2 == 45,
			  (C3 == 97) or (C3 == 65), (C4 == 109) or (C4 == 77),
			  (C5 == 105) or (C5 == 73) ->
		     {ok, [C1, C2, C3, C4, C5], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5 | Tl])
		     when (C1 == 105) or (C1 == 73), C2 == 45,
			  (C3 == 98) or (C3 == 66), (C4 == 110) or (C4 == 78),
			  (C5 == 110) or (C5 == 78) ->
		     {ok, [C1, C2, C3, C4, C5], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9 | Tl])
		     when (C1 == 105) or (C1 == 73), C2 == 45,
			  (C3 == 100) or (C3 == 68), (C4 == 101) or (C4 == 69),
			  (C5 == 102) or (C5 == 70), (C6 == 97) or (C6 == 65),
			  (C7 == 117) or (C7 == 85), (C8 == 108) or (C8 == 76),
			  (C9 == 116) or (C9 == 84) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9, C10 | Tl])
		     when (C1 == 105) or (C1 == 73), C2 == 45,
			  (C3 == 101) or (C3 == 69), (C4 == 110) or (C4 == 78),
			  (C5 == 111) or (C5 == 79), (C6 == 99) or (C6 == 67),
			  (C7 == 104) or (C7 == 72), (C8 == 105) or (C8 == 73),
			  (C9 == 97) or (C9 == 65), (C10 == 110) or (C10 == 78) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5 | Tl])
		     when (C1 == 105) or (C1 == 73), C2 == 45,
			  (C3 == 104) or (C3 == 72), (C4 == 97) or (C4 == 65),
			  (C5 == 107) or (C5 == 75) ->
		     {ok, [C1, C2, C3, C4, C5], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9 | Tl])
		     when (C1 == 105) or (C1 == 73), C2 == 45,
			  (C3 == 107) or (C3 == 75), (C4 == 108) or (C4 == 76),
			  (C5 == 105) or (C5 == 73), (C6 == 110) or (C6 == 78),
			  (C7 == 103) or (C7 == 71), (C8 == 111) or (C8 == 79),
			  (C9 == 110) or (C9 == 78) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5 | Tl])
		     when (C1 == 105) or (C1 == 73), C2 == 45,
			  (C3 == 108) or (C3 == 76), (C4 == 117) or (C4 == 85),
			  (C5 == 120) or (C5 == 88) ->
		     {ok, [C1, C2, C3, C4, C5], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6, C7 | Tl])
		     when (C1 == 105) or (C1 == 73), C2 == 45,
			  (C3 == 109) or (C3 == 77), (C4 == 105) or (C4 == 73),
			  (C5 == 110) or (C5 == 78), (C6 == 103) or (C6 == 71),
			  (C7 == 111) or (C7 == 79) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6, C7, C8 | Tl])
		     when (C1 == 105) or (C1 == 73), C2 == 45,
			  (C3 == 110) or (C3 == 78), (C4 == 97) or (C4 == 65),
			  (C5 == 118) or (C5 == 86), (C6 == 97) or (C6 == 65),
			  (C7 == 106) or (C7 == 74), (C8 == 111) or (C8 == 79) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5 | Tl])
		     when (C1 == 105) or (C1 == 73), C2 == 45,
			  (C3 == 112) or (C3 == 80), (C4 == 119) or (C4 == 87),
			  (C5 == 110) or (C5 == 78) ->
		     {ok, [C1, C2, C3, C4, C5], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5 | Tl])
		     when (C1 == 105) or (C1 == 73), C2 == 45,
			  (C3 == 116) or (C3 == 84), (C4 == 97) or (C4 == 65),
			  (C5 == 111) or (C5 == 79) ->
		     {ok, [C1, C2, C3, C4, C5], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5 | Tl])
		     when (C1 == 105) or (C1 == 73), C2 == 45,
			  (C3 == 116) or (C3 == 84), (C4 == 97) or (C4 == 65),
			  (C5 == 121) or (C5 == 89) ->
		     {ok, [C1, C2, C3, C4, C5], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5 | Tl])
		     when (C1 == 105) or (C1 == 73), C2 == 45,
			  (C3 == 116) or (C3 == 84), (C4 == 115) or (C4 == 83),
			  (C5 == 117) or (C5 == 85) ->
		     {ok, [C1, C2, C3, C4, C5], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9 | Tl])
		     when (C1 == 115) or (C1 == 83),
			  (C2 == 103) or (C2 == 71), (C3 == 110) or (C3 == 78),
			  C4 == 45, (C5 == 98) or (C5 == 66),
			  (C6 == 101) or (C6 == 69), C7 == 45,
			  (C8 == 102) or (C8 == 70), (C9 == 114) or (C9 == 82) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9 | Tl])
		     when (C1 == 115) or (C1 == 83),
			  (C2 == 103) or (C2 == 71), (C3 == 110) or (C3 == 78),
			  C4 == 45, (C5 == 98) or (C5 == 66),
			  (C6 == 101) or (C6 == 69), C7 == 45,
			  (C8 == 110) or (C8 == 78), (C9 == 108) or (C9 == 76) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9 | Tl])
		     when (C1 == 115) or (C1 == 83),
			  (C2 == 103) or (C2 == 71), (C3 == 110) or (C3 == 78),
			  C4 == 45, (C5 == 99) or (C5 == 67),
			  (C6 == 104) or (C6 == 72), C7 == 45,
			  (C8 == 100) or (C8 == 68), (C9 == 101) or (C9 == 69) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9], Tl};
		 (_) -> fail
	     end]).

regular() ->
    '__alt'([fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9, C10
		   | Tl])
		     when (C1 == 97) or (C1 == 65),
			  (C2 == 114) or (C2 == 82), (C3 == 116) or (C3 == 84),
			  C4 == 45, (C5 == 108) or (C5 == 76),
			  (C6 == 111) or (C6 == 79), (C7 == 106) or (C7 == 74),
			  (C8 == 98) or (C8 == 66), (C9 == 97) or (C9 == 65),
			  (C10 == 110) or (C10 == 78) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11
		   | Tl])
		     when (C1 == 99) or (C1 == 67),
			  (C2 == 101) or (C2 == 69), (C3 == 108) or (C3 == 76),
			  C4 == 45, (C5 == 103) or (C5 == 71),
			  (C6 == 97) or (C6 == 65), (C7 == 117) or (C7 == 85),
			  (C8 == 108) or (C8 == 76), (C9 == 105) or (C9 == 73),
			  (C10 == 115) or (C10 == 83),
			  (C11 == 104) or (C11 == 72) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11],
		      Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6 | Tl])
		     when (C1 == 110) or (C1 == 78),
			  (C2 == 111) or (C2 == 79), C3 == 45,
			  (C4 == 98) or (C4 == 66), (C5 == 111) or (C5 == 79),
			  (C6 == 107) or (C6 == 75) ->
		     {ok, [C1, C2, C3, C4, C5, C6], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6 | Tl])
		     when (C1 == 110) or (C1 == 78),
			  (C2 == 111) or (C2 == 79), C3 == 45,
			  (C4 == 110) or (C4 == 78), (C5 == 121) or (C5 == 89),
			  (C6 == 110) or (C6 == 78) ->
		     {ok, [C1, C2, C3, C4, C5, C6], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6, C7, C8 | Tl])
		     when (C1 == 122) or (C1 == 90),
			  (C2 == 104) or (C2 == 72), C3 == 45,
			  (C4 == 103) or (C4 == 71), (C5 == 117) or (C5 == 85),
			  (C6 == 111) or (C6 == 79), (C7 == 121) or (C7 == 89),
			  (C8 == 117) or (C8 == 85) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6, C7, C8 | Tl])
		     when (C1 == 122) or (C1 == 90),
			  (C2 == 104) or (C2 == 72), C3 == 45,
			  (C4 == 104) or (C4 == 72), (C5 == 97) or (C5 == 65),
			  (C6 == 107) or (C6 == 75), (C7 == 107) or (C7 == 75),
			  (C8 == 97) or (C8 == 65) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6 | Tl])
		     when (C1 == 122) or (C1 == 90),
			  (C2 == 104) or (C2 == 72), C3 == 45,
			  (C4 == 109) or (C4 == 77), (C5 == 105) or (C5 == 73),
			  (C6 == 110) or (C6 == 78) ->
		     {ok, [C1, C2, C3, C4, C5, C6], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6, C7, C8, C9, C10 | Tl])
		     when (C1 == 122) or (C1 == 90),
			  (C2 == 104) or (C2 == 72), C3 == 45,
			  (C4 == 109) or (C4 == 77), (C5 == 105) or (C5 == 73),
			  (C6 == 110) or (C6 == 78), C7 == 45,
			  (C8 == 110) or (C8 == 78), (C9 == 97) or (C9 == 65),
			  (C10 == 110) or (C10 == 78) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10], Tl};
		 (_) -> fail
	     end,
	     fun ([C1, C2, C3, C4, C5, C6, C7, C8 | Tl])
		     when (C1 == 122) or (C1 == 90),
			  (C2 == 104) or (C2 == 72), C3 == 45,
			  (C4 == 120) or (C4 == 88), (C5 == 105) or (C5 == 73),
			  (C6 == 97) or (C6 == 65), (C7 == 110) or (C7 == 78),
			  (C8 == 103) or (C8 == 71) ->
		     {ok, [C1, C2, C3, C4, C5, C6, C7, C8], Tl};
		 (_) -> fail
	     end]).

alphanum() -> '__alt'(['ALPHA'(), 'DIGIT'()]).

'obs-language-tag'() ->
    '__seq'(['primary-subtag'(),
	     '__repeat'(0, infinity,
			'__seq'([fun ([45 | Tl]) -> {ok, 45, Tl};
				     (_) -> fail
				 end,
				 subtag()]))]).

'primary-subtag'() -> '__repeat'(1, 8, 'ALPHA'()).

subtag() ->
    '__repeat'(1, 8, '__alt'(['ALPHA'(), 'DIGIT'()])).

registry() ->
    '__seq'([record(),
	     '__repeat'(0, infinity,
			'__seq'([fun ([C1, C2 | Tl]) when C1 == 37, C2 == 37 ->
					 {ok, [C1, C2], Tl};
				     (_) -> fail
				 end,
				 'CRLF'(), record()]))]).

record() -> '__repeat'(1, infinity, field()).

field() ->
    '__seq'(['field-name'(), 'field-sep'(), 'field-body'(),
	     'CRLF'()]).

'field-name'() ->
    '__seq'(['__alt'(['ALPHA'(), 'DIGIT'()]),
	     '__repeat'(0, 1,
			'__seq'(['__repeat'(0, infinity,
					    '__alt'([fun ([C | Tl]) when C == 45 ->
							     {ok, C, Tl};
							 (_) -> fail
						     end,
						     'ALPHA'(), 'DIGIT'()])),
				 '__alt'(['ALPHA'(), 'DIGIT'()])]))]).

'field-sep'() ->
    '__seq'(['__repeat'(0, infinity, 'SP'()),
	     fun ([58 | Tl]) -> {ok, 58, Tl};
		 (_) -> fail
	     end,
	     '__repeat'(0, infinity, 'SP'())]).

'field-body'() ->
    '__repeat'(0, infinity,
	       '__seq'(['__repeat'(0, 1,
				   '__seq'(['__repeat'(0, 1,
						       '__seq'(['__repeat'(0, infinity,
									   'SP'()),
								'CRLF'()])),
					    '__repeat'(1, infinity, 'SP'())])),
			'__repeat'(1, infinity, 'CHARS'())])).

'CHARS'() ->
    fun ([C | Tl]) when (C >= 33) and (C =< 1114111) ->
	    {ok, C, Tl};
	(_) -> fail
    end.

'__alt'(Ps) -> fun (T) -> '__do_alt'(Ps, T) end.

'__do_alt'([P | Ps], T) ->
    case P(T) of
      {ok, _R, _T1} = Res -> Res;
      fail -> '__do_alt'(Ps, T)
    end;
'__do_alt'([], _) -> fail.

'__repeat'(Min, Max, P) -> '__repeat'(Min, Max, P, 0).

'__repeat'(Min, Max, P, Found) ->
    fun (T) -> '__do_repeat'(Min, Max, P, Found, T) end.

'__do_repeat'(Min, Max, P, Found, T) ->
    case P(T) of
      {ok, R1, T1} when Max == Found + 1 -> {ok, [R1], T1};
      {ok, R1, T1} ->
	  case '__do_repeat'(Min, Max, P, Found + 1, T1) of
	    {ok, R2, T2} -> {ok, [R1 | R2], T2};
	    fail when Found >= Min -> {ok, [R1], T1};
	    fail -> fail
	  end;
      fail when Found >= Min -> {ok, [], T};
      fail -> fail
    end.

'__seq'(Ps) -> fun (T) -> '__do_seq'(Ps, T) end.

'__do_seq'([P | Ps], T) ->
    case P(T) of
      {ok, R1, T1} ->
	  case '__do_seq'(Ps, T1) of
	    {ok, R2, T2} -> {ok, [R1 | R2], T2};
	    fail -> fail
	  end;
      fail -> fail
    end;
'__do_seq'([], T) -> {ok, [], T}.
